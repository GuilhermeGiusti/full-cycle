Vamos falar sobre eficiência e performance. Essas duas palavras são palavras diferentes, com intenções diferentes, mas são totalmente correlacionadas. A capacidade de usar recursos de computação com eficiência para atender os requisitos de sistema e manter essa eficiência à medida que a demanda muda e as tecnologias evoluem.  Como funciona? Qual é essa ideia? Vamos entender primeiramente qual é a diferença entre eficiência e performance. Vamos lá! Eficiência é o quão bem algo pode rodar atendendo os requisitos de negócio. Como assim “o quão bem”? Como eu consigo rodar com menos fazendo mais? Sempre pensa assim, o que é ser eficiente? Fazer algo grande com menos. Conseguir gastar menos e conseguir otimizar aquela coisa que você está gastando menos para fazer o mesmo tipo de trabalho. Eu vou dar um exemplo muito simples. Toda situação, dependendo do escopo, só de você trocar a linguagem de programação, você já consegue aumentar muito mais a sua eficiência. Isso porque, dependendo da linguagem de programação, ela é mais eficiente porque ela faz mais coisa com menos e normalmente para ela ser eficiente ela tem que ter mais performance e quanto mais performance ela tem mais eficiente ela consegue ser. Mas eu não estou aqui apenas para falar de linguagem de programação. Eventualmente, como você mantém eficiência? Às vezes, você está usando uma máquina “X” que tem um custo “X” , mas se você utilizasse uma máquina “Y” com custo “Y”, você conseguiria ter o mesmo resultado gastando menos. Então eficiência é fazer mais com menos. E performance é “o quanto mais” normalmente você consegue performar. Normalmente, você consegue fazer mais com menos. Então, isso é um ponto importante quando a gente está falando de eficiência. E essa eficiência não tem que ser mantida somente na primeira vez que a aplicação foi para o ar. Rodou, está parada, está eficiente e beleza. Não, essa avaliação de eficiência tem que ser contínua porque invariavelmente, por exemplo, uma linguagem de programação atualizou, está em uma nova versão e nessa nova versão você já tem 20% de mais velocidade. “Poxa, vamos tentar organizar para tentar fazer esse upgrade”. Quais são as dependências para eu fazer esse upgrade para conseguir ser mais eficiente? Então, isso é muito importante, a eficiência tem que ser vista ao longo do tempo. 

E quais são os principais pontos que a gente tem que pensar em relação a eficiência e performance? Primeira coisa, democratizar tecnologias avançadas. O que isso significa? Que existem tecnologias extremamente complexas, difíceis, e que se você ou se algum desenvolvedor tivesse acesso, a empresa inteira conseguiria rodar com mais eficiência. Eu vou dar um exemplo bem “chulo”, mas eu acredito que vai dar para você perceber. Vamos imaginar que todas as requisições de todos os microsserviços funcionem de forma síncrona, porque foi feito dessa forma e tudo que roda de forma síncrona vai gastar mais, pois você tem que receber e retornar o resultado em tempo real. Você não consegue fazer o processamento em background, por exemplo. De repente, surge o serviço do Apache Kafka na AWS, surge o SQS, surge o Kinesis. São tecnologias extremamente robustas, extremamente complexas, mas que facilmente agora podem ser utilizadas. O quão trabalhoso seria para você gerenciar um cluster de Kafka? A AWS faz para você. Ou seja, tecnologias extremamente avançadas podem ser utilizadas para aquela empresa ter mais eficiência, fazer mais com menos. E em contrapartida, ela vai ter também mais performance. Imagina você pegar uma malha de 500 microsserviços que estavam rodando de forma síncrona e conseguir rodar isso de forma assíncrona. Grande parte deles. Você vai economizar muito. Ou seja, hoje, existem ferramentas que são extremamente complexas, ferramentas extremamente difíceis de gerenciar, mas que agora a gente tem acesso. 

Eu gosto de contar história, mas um dia não. Eu tive a oportunidade de ser mentorado por muitos anos por um dos vice-presidentes de um grande banco no Brasil. Na realidade foram de vários bancos. Mas eu lembro do dia que ele me levou até a Avenida Paulista e me mostrou um data center daquele banco. E falou que tudo que estava naquele data center, todas aquelas máquinas, toda aquela história, estava tudo replicado num outro lado, num outro bairro. E eu falei: “caraca, cara, realmente não é qualquer pessoa que consegue montar um banco. Ou montar alguma coisa com alta tecnologia, porque é extremamente complexo”. Hoje em dia, com a nuvem, qualquer startup consegue ter acesso a qualquer tipo de tecnologia que um banco roda, porque coisas complexas estão “democratizadas”. Agora pelo menos você tem acesso. É barato? Não, mas você tem acesso. É muito mais barato você começar, hoje em dia, do que você ter que fazer um investimento gigante só para aparecer o seu “olá mundo” para o cliente final. 

 Então, tornou-se global em minutos. Hoje em dia, a gente tem que pensar o seguinte, quando falamos em tornar global, você vai ter várias esferas, vários pontos de vista. O primeiro ponto de vista é o seguinte: alta disponibilidade. Eu consigo rodar a mesma carga de trabalho que eu estou rodando nos Estados Unidos, rodando em São Paulo, rodando na Europa. Você consegue fazer isso facilmente hoje em dia, utilizando a nuvem. Isso é importante. Não somente regiões em diferentes lugares do mundo, como a parte de zonas de disponibilidade, AZs, a viability zones. O que isso significa? Significa que você vai estar rodando em diversos data centers com pelo menos 100 quilômetros de diferença entre eles, para garantir que mesmo que aconteça um evento trágico por questões naturais, você consiga rodar. Um outro ponto importante também é você conseguir se manter dentro da lei. Por exemplo, eu não posso mais guardar dados de cidadãos europeus em data centers americanos. Como eu faço agora isso? Eu consigo rapidamente ser global e guardar esses dados na Europa, por exemplo. 

Use arquitetura serverless. Já falamos sobre serverless e agora você já sabe também que ao falar em arquitetura serverless, a gente não está falando apenas em Lambda Functions. A gente está falando em S3, em DynamoDB, em RDS, em Lambda Functions e em diversos tipos de serviço. O que é serverless? Serviços que, no final do dia, você não tem que mais pensar em operação. Você só chega e usa. Ele escala e se vira para você. Outro ponto importante: experimente com mais frequência, cada dia tem uma novidade, em qualquer cloud provider. Se você não tiver a cultura de experimentar, de testar as coisas, você nunca vai saber se você consegue ter mais eficiência, porque recursos novos acontecem o tempo inteiro. Vou dar um exemplo para você. Quando a gente está rodando uma Lambda Function, sempre temos aquele ponto do cold start, que muita gente fala, ou seja, é o tempo de a sua aplicação baixar e ser baixada de um S3, ser deployada e começar a rodar. Você pode ter um segundo de latência. Mas agora, para algumas linguagens de programação, você tem o seu snap start, ou seja, você consegue subir bem mais rapidamente. Isso você só consegue fazer experimentando. E outro ponto que ele chama é o consider mechanical sympathy, ou seja, no final do dia, você tem que, além de conseguir experimentar, também vai ter que se acostumar, cada dia mais, a utilizar aqueles tipos de solução. Então, a gente falou sobre eficiência e performance.