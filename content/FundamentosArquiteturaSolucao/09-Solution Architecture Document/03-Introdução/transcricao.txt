Bom, pessoal, como eu tinha falado para vocês no início, nem todo SAD, vou chamar de SAD daqui para frente, possui a mesma estrutura, porque cada um vive de um contexto diferente. Normalmente, o que a gente coloca, o que se documenta, vocês vão ver que tem diversos templates. Esses templates variam de empresa para empresa. Dependendo do que essas empresas utilizam, normalmente elas dão ênfase principalmente nos pontos que a empresa mais tem dificuldade, ou nos pontos que a empresa realmente acha necessário documentar. Então a gente documenta o que importa. 

Tem muita gente que pergunta, o que é Arquitetura? Arquitetura é o que importa. Essa é a grande “sacada”. Se o projeto for maior ou o risco do projeto, maior a documentação. Agora quais são os principais tópicos que normalmente a gente trata nesse documento aqui ? Normalmente, a gente vai andar passo a passo com você, normalmente a gente tem uma introdução e essa introdução ela vai falar o propósito do documento. Normalmente é isso, um parágrafo ou dois parágrafos no máximo, para quem olhar poder falar, “poxa, eu vou desenvolver um sistema de ingresso para as pessoas contratarem um show, mas esse ingresso vai pegar shows apenas de gente muito famosa, então esse sistema tem que ser um sistema realmente muito “parrudo” desde o dia zero”. Depois temos o escopo da solução, falamos: “esse sistema vai conseguir desde o início ser muito “parrudo”, ele vai poder realizar os pagamentos, desde o dia zero também. O usuário vai ter algo que ele coloca na wallet core, mas ao mesmo tempo ele também vai ter parceiros que vão poder cadastrar o show ali”. Estou dando uma visão geral do que esse sistema vai ter. Mas quais são as minhas principais restrições? Essa parte de restrição é a parte que a gente tem que tomar mais cuidado, porque normalmente, as pessoas que mais criticam os projetos, quando não vê o contexto, dizem: “nossa, por que você está utilizando Ruby para fazer um projeto desse que vai precisar de alta concorrência?” ou  por que  não foi feito um Elixir?”.São restrições. Por exemplo, a maioria dos meus funcionários que vão participar desse projeto são programadores Ruby. Então no projeto há restrição. A gente está restringido por nossa mão de obra fazer em Ruby. Então, as restrições são pontos importantes. Por exemplo, eu tenho uma janela de oportunidade, se esse projeto não tiver pronto em quatro meses seria melhor que esse projeto não tivesse existido. Então, nós temos restrições, e essas restrições podem ser de tempo, de mão de obra, financeiras, de propriedade intelectual, governamentais e de regulamentações. Então, a gente pode ter diversas restrições que não consigam fazer com que a gente faça o projeto na sua plenitude, assim,  nenhum projeto é perfeito, nenhum contexto é perfeito.

Outro ponto  é pressuposto, os assumptions. Para fazer isso, eu estou partindo do princípio que eu tenho uma equipe de 20 desenvolvedores e que eu tenho 500 mil dólares para eu começar a desenvolver esse projeto. Eu estou partindo do princípio que eu vou ter um gerente de projeto e que eu vou poder contar com 10 funcionários da empresa que já trabalham há 10 anos full time por aquele tipo de coisa. Eu estou fazendo um pressuposto que para o projeto ser economicamente viável a gente vai conseguir um acordo com a Google Cloud, para ela conseguir baixar o valor da taxa de transferência dela. Ou seja, para eu conseguir fazer isso, eu parto do princípio que já consegui esses aspectos. Esses aspectos vão me ajudar a ter mais flexibilidade na hora que eu for trabalhar com o meu projeto. Então, isso é uma introdução basicamente, um escopo com pressuposto, restrições e tudo mais. Maravilha! Vamos seguir para o nosso próximo vídeo.