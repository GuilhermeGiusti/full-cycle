Agora que a gente entendeu que temos esses pipes, essas conexões, esses pilares de observabilidade, eu queria que você soubesse as principais ferramentas que, normalmente, quando a gente fala de observabilidade, estão no mercado e muitas pessoas utilizam. “Wesley, por que é importante?” Porque, mesmo que você não entenda essas ferramentas, nem nunca tenha aberto elas, eu quero que você ao sentar em uma mesa com alguém para falar de desenvolvimento, e alguém falar esse nome, você saiba que essa ferramenta ajuda nos pontos de observabilidade. 

Então, essa é a minha ideia para dar um “overview” a você. Para que você consiga sentar à mesa e conversar com as outras pessoas. E, obviamente, pessoal, para vocês conseguirem saber quais são os vendos de mercado. Eventualmente, você é uma pessoa que toma decisões na sua empresa e você sabe que precisa da observabilidade. Então, você sabe com quais players, quais são as opções que você tem para escolher. Assim, vamos falar sobre algumas ferramentas populares. Um ponto importante é que nenhuma dessas empresas, no momento em que eu estou gravando, me pagou qualquer coisa para eu falar. Eu não estou fazendo propaganda gratuita ou qualquer coisa desse tipo. Paga,  gratuito ou qualquer coisa desse tipo. Estou dizendo que essas são as ferramentas que eu ouço mais as pessoas fazerem, utilizarem e que são mais populares no mercado, ou seja,  na minha opinião, são essas que eu vou mostrar. Obviamente, tem outros players, tem outras ferramentas, tem muita coisa boa no mercado. Então, não significa que, porque eu não estou mostrando todas as ferramentas do mercado, é algo impossível que  essas aqui sejam melhores ou piores. Outro ponto importante é a ordem que eu estou mostrando as ferramentas aqui. Não significa que essa ordem é por popularidade ou por dizer que essas ferramentas são melhores ou piores do que as outras. Simplesmente é uma lista para você começar a ouvir, pelo menos, falar nesses nomes.

 A primeira ferramenta dessa lista é chamada de Elastic Stack. Essa solução, de forma geral, é open source. Você pode utilizar sem precisar pagar nada. Porém, o que acontece? O Elastic Stack é coberto por o Kibana, que é um dashboard. E esse dashboard tem plugins. E alguns desses plugins são pagos, porque são de propriedade exclusiva da Elastic. Elastic é uma empresa. Elastic Stack é uma stack open source. São coisas diferentes. Por que o nome Elastic Stack? Porque o nome Elastic vem, inicialmente, do Elasticsearch, que é um banco de dados muito bom para busca. Então, os dados são inseridos nesse banco de dados e o Kibana, que é um dashboard, consegue ler esses dados e trazer esses dados de forma agregada e etc. Junto do Elastic Stack, existem alguns componentes que vão nos ajudar a mandar esses dados para a sua aplicação. Ou seja, ele tem o Beats, o Flee, e um monte dessas coisas no momento. Então, essa é uma ideia geral, você consegue instalar nos seus servidores o Elastic Stack sem precisar utilizar a empresa Elastic para você conseguir monitorar. Um ponto de atenção aqui é que no Elasticsearch, no Elastic Stack, você vai ter que utilizar, por exemplo,  a parte de observabilidade dele, o Elastic APM (Application Performance Monitoring). Cada um desses, é um serviço, então, você “terá que subir diversos serviços ou diversos servidores”. E mexer com o Elastic Stack, com os servidores, fazer a operação desses servidores não é algo fácil, ou seja, não é algo trivial gerenciar um Elasticsearch. Então, por isso que muita gente utiliza a empresa Elastic, porque eles têm um serviço Cloud e nesse serviço Cloud eles gerenciam para você os serviços e você paga uma taxa. Eles fazem o deploy na Azure, na Google, na AWS, para conseguir garantir que vai ter menos latência em todos esses pontos. 

 A gente tem uma outra ferramenta muito conhecida, a Datadog. A Datadog é uma ferramenta fantástica, eles têm muitos serviços e esses serviços, cada vez mais, acabam complementando todos aqueles três pilares, pipes e etc. Ou seja, aqueles pipes. Imaginam que eles geram vários, para conseguir cada vez trazer informações mais interessantes para você. É uma ótima ferramenta. 

Outra ferramenta também é a New Relic. Essa ferramenta é extremamente tradicional também. Ela soube se reinventar durante os anos e é muito interessante porque ela traz de uma forma bem simples e customizável as informações que você precisa. Tanto essas informações de New Relic etc. normalmente você tem um agente que fica rodando e ele fica mandando dados para esse vendor.

 Splunk. Outra ferramenta fantástica, muita gente utiliza bastante o Splunk, principalmente por conta de logs. Então, é uma ferramenta fantástica que você pode considerar. Dynatrace, também é outra ferramenta muito boa. Normalmente todas essas ferramentas acabam ou se complementando ou concorrendo entre si. Mas, por exemplo, eu conheço empresas que fazem o seguinte, eles guardam todos os logs no Elastic,  mas eles usam o serviço de tracing do Datadog. Então, eles acabam compondo. Isso faz com que você perca alguns insights porque as coisas não se encadeiam, mas mesmo assim, às vezes é por questão de custo, eu falo isso porque log é caro pois tem muito dado. Eu vou jogar no Elastic, eu gerencio o Datadog, ele gerencia os meus tracings, por exemplo. Aqui tem algumas outras ferramentas, eu coloquei um asterisco principalmente para dizer que essas ferramentas são cloud native e também são open source. Apesar de que o Elastic também é open source, mas ele tem uma empresa muito forte por trás, trazendo diversas funcionalidades. 

Outra ferramenta que talvez você já tenha ouvido falar é o Prometheus. O Prometheus é uma ferramenta para métricas ( lembra que a gente falou?), dados agregados, contadores e “histogramas”, eu não tenho certeza de como se fala isso em português, ou seja, ele consegue ir pegando essas informações e guardando num banco de dados. O banco de dados que o Prometheus trabalha, a gente chama de data series, database, ou seja, time series database. Ele vai recebendo os dados, vai guardando os logs num formato de log baseado no tempo. Então, ele tem os intervalos. Uma coisa interessante também do Prometheus é o seguinte, ao invés de você ter um agente do Prometheus que fica enviando os dados para sua aplicação, os dados para ele, ou seja, sua aplicação tem um agente que manda os dados para o Prometheus. No caso do Prometheus ele é ao contrário. O Prometheus, a cada tantos segundos, você configura e ele acessa um endpoint da sua aplicação para pegar as informações e gerar essas métricas. Então, a gente pode dizer que tem ferramentas de observabilidade que faz um “push”, ou seja, ela pega a informação e joga para ela. Pega o seu sistema e joga para ela as informações. E tem ferramentas como o Prometheus que ele faz um “pull”, ou seja, a ferramenta olha a sua aplicação num endpoint e pega as informações para elas. Uma outra coisa importante também no Prometheus é que ele tem algo chamado de exporters. Vamos imaginar que o Prometheus precisa pegar dados do seu sistema operacional, como num endpoint HTTP. Ele vai pegar esses dados no sistema operacional? Não é possível. Então, o exporter é uma espécie de um plugin que você instala. Esse plugin pega os dados do sistema operacional e disponibiliza esses dados num endpoint. O Prometheus vai lá nesse endpoint e pega os dados do sistema operacional. Ele faz a ponte entre algumas ferramentas para que o Prometheus consiga ter… Imagina, como o Prometheus vai ter acesso a um banco de dados MySQL. Você instala o exporter de MySQL, o exporter lê os dados do MySQL e o Prometheus pega os dados do exporter. Então, isso é super importante. Uma outra coisa interessante é que o Prometheus trabalha com sistema de alarmes, ou seja, você coloca os monitoramentos e as condições e ele dispara alarmes. Ele tem alarmes super inteligentes que trabalham de forma encadeada em contextos. Por exemplo, imagina que você tem um alarme para dizer que, quando você tiver menos de 100 visitas no seu site, ele tem que apitar. Mas imagina que você tem um alarme que fala, quando o seu sistema cair, ele me avisa. Agora você concorda comigo que se o meu sistema cair, ele vai soltar o alarme? Concordo. Você concorda que se o meu sistema cair, vai ter menos de 100 pessoas no meu site? Concordo. Então, em tese ele iria sair disparando dois alarmes. Mas ele é inteligente o suficiente da forma como a gente encadeia, do seguinte, se o sistema caiu, obviamente não vai ter 100 pessoas. Então, eu não preciso disparar o alarme de 100 pessoas porque eu já recebi o alarme que depende dessa outra situação. Isso é bem interessante. Junto com o Prometheus, normalmente você utiliza uma ferramenta chamada Grafana. E essa ferramenta também é gratuita. Essa ferramenta ajuda a pegar os dados do Prometheus e gerar dashboards, e esses dashboards também podem conter alarmes. Então, você consegue ver, de uma forma muito clara, muito bonita, com diversas informações bem completas, o que está acontecendo. Então, você consegue pegar essas métricas. Você também consegue pegar dados, por exemplo, do Splunk e jogar no Grafana. Você consegue pegar dados de vários lugares e também olhar no Grafana. Um ponto interessante aqui do Grafana é que ele tem diversos dashboards prontos, que foram desenvolvidos por outras pessoas. Então, você pode navegar no site do Grafana e olhar os dashboards que façam mais sentido para você. Por exemplo, eu quero monitorar a Kubernetes. Em vez de criar um dashboard do zero, monitorando todos os pontos do Kubernetes, eu posso ir nesse site, olhar um código do dashboard do Kubernetes e no Grafana eu falo: “eu quero esse dashboard”. E ele já monta todo aquele dashboard para você e você só customiza o que você quiser. 

Temos também o Jaeger. O que é o Jaeger? O Jaeger é uma outra ferramenta de observabilidade e o grande foco dele está na parte de tracing. E mais além, vamos mais além, tracing distribuído. Eu tenho o microsserviço 1, que bate no 2, que bate no 3, que bate no 4 e eu quero ver todo esse encadeamento de informações e cada coisa que está acontecendo dentro de cada um desses microsserviços. Então, o Jaeger consegue fazer isso. O Jaeger é uma ferramenta open source, é um projeto da CNCF (Cloud Native Computing Foundation). A gente vai falar sobre a CNCF também, ainda nesse módulo. Então, o Jaeger é uma ferramenta muito popular. E da mesma forma que tem o Jaeger, a gente tem uma outra ferramenta bem interessante que chamamos de Zipkin. O Zipkin é uma ferramenta que eu acredito ser mais antiga que o Jaeger, é mais tradicional que o Jaeger. O Jaeger tem algumas opções a mais do Zipkin e talvez ele aguente uma carga de dados muito maior, tem muita gente que fala isso. Honestamente, eu nunca fiz um comparativo, estou falando o que eu já ouvi falar de pessoas que têm mais experiência. Agora uma coisa bem interessante, que é importante você saber, do Zipkin, o Jaeger eu acho que também se aplica, é o seguinte: quando você vai utilizar o Zipkin, o seu sistema vai gerar essas métricas e vai conseguir enviar esses dados para o Zipkin em um determinado padrão. Então, o Zipkin, vamos dizer, tem um padrão de tracing, existe um padrão de tracing. Agora imagina que você quer pegar esses dados e jogar no OCI da Oracle, na AWS, no CloudWatch, etc. Como que eu consigo pegar esses dados de tracing e jogar para uma solução em cloud? Essas soluções na nuvem normalmente aceitam esse padrão que o Zipkin usa. Então, o que acontece nesse momento? Você consegue pegar os dados da sua aplicação, instrumentar esses dados e jogar no Zipkin e aproveitar eventualmente o mesmo código mudando o endpoint e jogando para a nuvem que você queira utilizar. Eu tive que fazer isso algumas vezes, inclusive eu fiz isso com o OCI. Eu tinha uma aplicação minha, que eu usava o Zipkin, e me convidaram para dar uma palestra numa sala da Oracle, num evento. E eu falei assim: “poxa, eu queria falar sobre observabilidade, mas eu queria mostrar algo de observabilidade utilizando a nuvem da Oracle, que é o OCI”. Então, o que eu fiz? Aproveitei exatamente o mesmo código das informações que eu mandava para o Zipkin e apenas troquei o endpoint, mandando essas informações para o OCI e da mesma forma como eu via essa informação no Zipkin, eu pude ver lá dentro do sistema da OCI. É bem interessante você saber que muitos desses tracings, essas informações, contêm um padrão.

Então, essa é a ideia que eu queria trazer para vocês. A gente também tem uma outra solução nessa parte, principalmente de rastreabilidade, de Tracing, que é chamada de Kiali. O Kiali também é uma solução Cloud Native, a gente vai falar um pouco melhor depois sobre Cloud Native. A ideia do Kiali é conseguir fazer rastreabilidade e verificar a comunicação entre sistemas. O Kiali nasceu inicialmente para ser um sistema de rastreabilidade de uma mesh, de um service mesh que se chama Istio. A gente já falou sobre service mesh. Então, o Kiali é instalado em cima do Istio e o Istio instalado em cima do Kubernetes, assim, você consegue ver os seus serviços se comunicando. É muito legal isso. Ele nasceu inicialmente para falar com o Istio, mas, hoje em dia, ele já fala com OpenShift, com Linkerd e ele com Consul. Portanto, você consegue usar o Kiali em outras meshes, em outros sistemas de service mesh além do Istio. Normalmente, você precisa de um sistema de service mesh. O sistema de service mesh vai sempre se comunicando via proxy, o Kiali pega esses dados de comunicação e consegue trazer as informações, ajudando você a fazer gerenciamento de tráfego e um monte de coisas.

 Então, galera, eu sei que passei uma visão geral sobre essas ferramentas, como eu disse para vocês, a ideia não é se aprofundar em nenhuma delas, mas eu quero que você saiba que elas existem. Quero que você conheça as principais e essas com um asterisco são ferramentas cloud native e ferramentas open source que vão te ajudar no dia a dia. Além disso, é  bem popular as grandes empresas utilizarem essas ferramentas. É isso sobre ferramentas. Vamos seguir também sobre observabilidade.