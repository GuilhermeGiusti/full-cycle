Bom pessoal, agora nós vamos falar sobre um assunto que é extremamente importante em relação a esses patterns, que é a parte de Cash Collection. Como isso funciona e como a gente pode utilizar o caching no dia a dia? O grande ponto do cash é o seguinte: todo mundo pensa que sabe utilizar, mas, no final das contas, não tem algumas técnicas que vão fazer muita diferença na utilização dele. Como é que funciona a história do Cash? Imagina que eu tenho uma aplicação e ela tem, por exemplo, um banco de dados. E daí, o que acontece? Eu recebo uma solicitação na minha aplicação e a minha aplicação consulta os dados, faz um processamento pesado, não importa. E o que acontece? Vamos imaginar que eu demorei 900 milissegundos para pegar essa resposta e retornar. Mas, o grande ponto que a gente tem aqui é o seguinte: vamos imaginar que exatamente a mesma solicitação aconteceu logo em seguida, pelo mesmo usuário. O que vai acontecer? Ele vai fazer novamente essa solicitação e vai demorar os mesmos 900 milissegundos. Agora, a grande questão aqui é a seguinte: como eu consigo economizar tempo e gastar menos recursos aqui? Então, é por isso que a gente tem o resultado do caching. Como é que funciona o cache? A ideia dele é muito simples, porém, tem diversas variações. Então vamos lá! Eu recebi uma requisição, a minha aplicação vai buscar se o resultado dessa requisição está em um cache. Normalmente o cache é um sistema à parte e normalmente é um banco de dados que guarda as coisas em memória para ter um acesso muito rápido. Mas, às vezes o próprio cache pode ser guardado em um banco de dados, mas normalmente as pessoas não gostam muito dessa pegada.

 

É muito comum você em um cache usar um Redis ou alguma coisa desse tipo, uma caching, alguma coisa assim, para você conseguir acessar rapidamente os dados. Logo, a minha aplicação vai lá, busca o cache e vai ver que não existe a informação que ela está buscando na primeira vez. E o que acontece? A minha aplicação vai lá, pega os dados, processa, vai no banco de dados, grava essa informação no cache e essa informação é retornada para a minha aplicação, para o usuário final. Assim, a partir de agora essa informação está no cache. Então, o que vai acontecer na próxima vez que acontecer essa requisição? A aplicação vai buscar no cache, o cache vai existir daquela informação e já vai retornar direto para a aplicação de uma forma muito rápida, sem ter que bater no banco de dados, sem ter que fazer processamento pesado. Portanto, essa é a ideia principal quando estamos falando de cache. Agora, o lance é o seguinte: a parte mais, entre aspas, complexa, quando você tá trabalhando com cache, não é ter necessariamente essa volta que a gente falou. A parte um pouquinho mais complexa em relação ao cache é a parte de invalidação. Por quê? Porque invariavelmente, aqueles dados que a gente guarda no cache vão mudar. Imagina que o estoque do produto a gente guardou como 10, daí vendeu um produto e eu tenho que validar aquele 10 para eu mudar para 9, entendeu? E, as estratégias de validação que podem gerar um pouquinho de confusão na cabeça das pessoas e nós vamos entender um pouquinho delas. Legal? Nós vamos ver isso no próximo vídeo, para ficar um pouco mais claro para vocês. Vamos nessa?