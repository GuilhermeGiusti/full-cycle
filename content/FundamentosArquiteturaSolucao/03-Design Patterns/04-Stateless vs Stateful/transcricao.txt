Bom pessoal, no vídeo anterior a gente falou sobre arquiteturas multi-tenant e agora eu quero falar um pouquinho sobre arquiteturas Stateless vs Stateful. Isso galera, essa clareza aqui é uma das clarezas mais importantes, que vai determinar se você vai poder escalar ou não a sua aplicação. Então, preste muita atenção caso você ainda não saiba o que é Stateless, o que é Stateful, e obviamente, se você já sabe, preste atenção do mesmo jeito. Então vamos lá galera, Stateless e Stateful. Vamos imaginar que você tem a seguinte aplicação, tem a sua PP, a sua aplicação normal que você desenvolveu, um sistema monolítico qualquer. E, toda vez que alguém loga no seu sistema, o que você vai fazer? Nesse seu mesmo sistema, você vai guardar as sessões ali no servidor e gera uma sessão para garantir que a pessoa está autenticada. E o que acontece? Na hora de você subir as suas imagens, etc, está no seu servidor também. E o mais interessante é que o usuário, por exemplo, pode fazer um upload de uma imagem, se ele vai lá, faz upload, sobe o seu mp3, muda a sua foto, perfil e vai jogando ali tudo também no servidor, tem as pastinhas bonitinha, pastinha de imagem, de vídeo, pastinha de mp3 e tudo mais.

 

Logo, o que acontece? Eu tenho os logs, tudo o que acontece na minha aplicação eu gero um log lá no arquivo, / var, / logs, / indnex. Por quê? Porque eu quero ter todos os logs de tudo o que acontece na minha aplicação. E, eu vou tendo outras coisas que são importantes para a minha aplicação. O que tem de errado nesse tipo de arquitetura? Se você olhar, não tem nada de errado, né? Funciona. Eu logo e funciona, subo os arquivos, tem os meus logs e tudo mais. O meu grande problema aqui é quando eu vou escalar isso. Por quê? Porque quando eu vou escalar, as seções estão guardadas no servidor. Os Assets que a pessoa fez o upload estão no servidor e os logs estão no servidor. O que significa? Vamos imaginar que eu tenho o servidor 1 e o servidor 2, porque eu quis a escala, eu quis adicionar mais máquinas. E, eu fiz o login na máquina 1, e quando dou um refresh, o load balancer me manda para a máquina 2. Mas, na máquina 2 a minha sessão não está lá, na máquina 2 a imagem que eu subi não está lá. Legal? E o mais interessante, vamos imaginar que o load balancer diminuiu e ficou uma única máquina novamente.

 

Os logs da máquina 2 foram perdidos. Por quê? Porque aquela máquina foi destruída. E é aqui, o momento onde a gente fala sobre aplicações Stateless e aplicações Stateful. Esse tipo de aplicação aqui é uma aplicação stateful. Por quê? Porque ela armazena estado, ou seja, conforme você usa a aplicação, coisas das seções do usuário, coisas do usuário ficam armazenadas nessa mesma aplicação. E, se essa aplicação morrer e a gente criar uma outra, os dados do usuário são perdidos junto. Por conta disso, toda vez que você quiser escalar uma aplicação, você vai ter que tomar cuidados para que a sua aplicação evite ao máximo ser Stateful e ela passe a ser Stateless. Stateless é quando eu não tenho estado. Como funciona? Como eu disse para vocês, imagina que eu tenho um ASG, um auto scaling group. Então eu tenho uma máquina 1 e a máquina 2 aqui. Quando eu perco a máquina 2, o que vai acontecer? Os dados foram perdidos. Agora, posso ter uma outra decisão que eu possa querer tomar, que é a seguinte: ao invés, por exemplo, de quando eu matar a minha máquina e eu perder esses dados, o que eu posso ter aqui? A minha sessão, eu posso deixar em um Redis ou em um banco de dados, por exemplo, para que ela não fique gravada na minha aplicação.

 

Os Assets, ao invés de eu subir em uma pasta "Uploads" na minha aplicação, eu subo, por exemplo, na Amazon S3. Então, todas as aplicações que eu escalar podem acessar aquele asset. Os logs, o que eu faço? Eu gero esses logs sempre saindo para o terminal, para o std aut std error. E o que acontece? Eu pego um sistema de observabilidade, um sistema de logs que fica olhando tudo o que está saindo no std auth, pegando esses logs e jogando para um banco de dados separado. Logo, quando a sua instância morrer, você não vai ter perdido aqueles logs também. Pessoal, isso é o básico, o fundamento do fundamento para você conseguir criar qualquer tipo de aplicação que vai escalar. Se a sua aplicação não consegue subir e ser removida sem você perder nenhum dado, quer dizer que você não pode escalar. Nos dias de hoje, as vezes a gente está rodando com dez máquinas, depois está com 100 máquinas, depois você está rodando com cinco máquinas. Tudo isso dependendo do tráfego. Isso só é possível por quê? Porque a aplicação é Stateless. No momento que você criou essa aplicação de forma Stateful, aí a coisa fica mais complicada, cada vez mais complicada para conseguir gerenciar isso. Beleza? Aqui está a diferença entre Stateless e Stateful Applications.