Bom pessoal, agora nós vamos falar do famoso Circuit Breaker. Mas, antes de falarmos especificamente do Circuit Breaker, em relação a software. Eu quero falar sobre o que é um breaker. Provavelmente, se você está na sua casa, você deve ter um disjuntor, e o disjuntor é o famoso breaker. O que esse cara faz no final das contas? Quando você recebe uma carga muito pesada de energia, para que ele não frite os seus eletrodomésticos, ou tenha algum problema mais grave, quando ele recebe isso mais forte, esse disjuntor cai e daí não tem como mais essa corrente elétrica passar para o restante da sua casa. Legal?

 

Então, o Circuit Breaker no desenvolvimento no mundo da tecnologia, ele funciona da mesma forma. Vamos imaginar que você tem um Microsserviço 1 e você tem um Microsserviço 2. De repente, o que você vai fazer? O Microsserviço 1 manda uma requisição, manda outra requisição, manda outra requisição, manda outra requisição e você vai perceber que o Microsserviço 2 vai começar a ficar lento, ele vai começar a travar. E tem um problema grave com isso. O problema grave com essas coisas que começam a acontecer é que o Microsserviço 2 vai ficar lento e ele vai demorar para retornar os dados para o Microsserviço 1. E, se o Microsserviço 1 demorar para pegar esses dados, o Microsserviço 1 também vai ficando lento e isso vai gerar um efeito dominó, um efeito em cascata em todo o seu ecossistema de microsserviços. Entendeu? Galera, pensa assim comigo. Pior que um microsserviço fora do ar, é um microsserviço lento. Porque se um microsserviço estiver fora do ar,  quando você manda uma requisição, você já recebe ali connection refused, já recebe um erro 500, já recebe qualquer coisa, e você toca a sua vida. Se eu mando uma requisição e o Microsserviço 2 está fora do ar, eu mandei, já vi que está fora do ar e sigo a minha vida, faço o meu plano de contingência.

 

Agora, se o Microsserviço 2 não estiver fora do ar, eu vou mandar a minha requisição e não vou ficar aguardando e eu vou ficar lento. Entende qual é a situação? Então, o que acontece? Conforme você vai mandando mais requisições e eu já estou lento e você vai mandando mais requisições, vai chegar uma hora que eu fico fora. Mas até eu sair do ar, o Microsserviço continua mandando requisições, e o Microsserviço 1 vai ficando cada vez mais lento. Entendeu? Como que nós evitamos esse tipo de problema com Circuit Breaker? Vamos imaginar aqui no nosso Circuit Breaker que o Microsserviço 1 manda uma requisição 1. Imagina que você tem esse canal de comunicação, e quando o Microsserviço 2 começa a ficar lento, o que ele vai fazer? Ele vai quebrar esse canal de comunicação. Assim, o que vai acontecer é que o microsserviço 1, quando ele mandar uma requisição para o Microsserviço 2, ele já vai receber um connection refused, ele já vai receber um erro 500, não interessa qual é o tipo de erro.

 

O grande ponto é que o Microsserviço 1 vê que o Microsserviço 2 está indisponível e ele segue com a vida dele. Legal? Agora, o grande ponto aqui é que a gente pode ter alguns estados para esses microsserviços. A gente tem o estado fechado, que é dessa forma como eu estou mostrando aqui. O que o estado fechado faz? Ele mantém a comunicação entre os dois microsserviços e está tudo funcionando. E, nós temos o estado aberto, que é esse estado aqui. O que significa? Quando o microsserviço 1 vai mandar uma mensagem para o 2, ele não consegue estabelecer a comunicação ou o microsserviço 2 fala: “Não vou receber mais nenhuma requisição”, e daí o microsserviço 1 toca a vida. Isso é quando o breaker acontece. Temos também um outro estado, que chamamos de meio aberto. O que esse cara faz? Vamos imaginar que o Microsserviço 2 ficou fora do ar e abriu o circuito. Como que eu sei que ele já está pronto novamente para receber a minha requisição? Então, o Microsserviço 1 faz o seguinte: ele manda uma requisição, vê se responde, não respondeu, beleza, passa um tempinho, manda mais uma requisição e o microsserviço 2 falou: “tô ok”. Logo, o Microsserviço 1 mandam mais um “tá ok” e mandam mais um “tá ok”. E daí ele fala: “opa, o cara tá no ar”. Assim, ele continua mandando todas as requisições de uma vez, entendeu? Logo, muitas vezes o que o Microsserviço 1 tem que esperar é o Microsserviço 2 se curar. Como assim curar? Normalmente nós usamos um nome para isso, que é chamado de self healing, auto cura. Às vezes ele recebeu tanta requisição que ele ficou fora.

 

Então, se eu parar de mandar a requisição, ele termina de processar o que ele está processando e daí ele fica normal novamente, ou seja, ele se curou e depois disso o microsserviço 1 volta a mandar mais requisição. Portanto, essa é a ideia do Circuit Break. Agora, uma observação. Existem formas de trabalhar com o Circuit Breaker. Uma forma é você trabalhar no Circuit Breaker, no Microsserviço que está recebendo a requisição. Você pode colocar um proxy na frente, pode colocar algumas regras, que na hora que você está mandando a requisição, o Microsserviço 2 para de atender essas requisições. Essa é uma opção. A outra opção é fazer isso no Microsserviço 1, ou seja, você manda um monte de requisição e aquele cara não está respondendo, então você para de mandar aquela requisição, espera e manda de novo para ver. Legal? Somente para você saber que tem essas opções. A forma mais comum de acontecer é que o Circuit Breaker seja implementado pelo desenvolvedor, e é algo que eu não recomendo. É melhor você ter um proxy que vai tomar conta desses tipos de coisas. Nós vamos falar disso um pouco mais para a frente, quando falarmos de service mesh. Mas, o importante aqui é entender a ideia, depois a gente vai seguir para os pontos mais específicos. Beleza? Um grande abraço, tudo de bom e até o nosso próximo vídeo.