Bom pessoal, agora nós vamos falar sobre um tema que é complexo e eu quero dar a ideia geral aqui para você. Mas, de forma geral, em todo o curso a gente vai falar de forma mais específica sobre esse cara aqui, que é o famoso Event Driven Architecture ou EDA. Para que serve esse camarada? O que acontece pessoal, nós estamos muito acostumados a fazer requisições síncronas, o serviço chama diretamente o serviço B. Mas, hoje em dia, principalmente quando você está trabalhando com microsserviços e quer conseguir escalar a sua capacidade de processamento, você vai perceber que fazer isso de forma assíncrona é impossível, porque você vai gastar muito processamento e é por conta disso que tem a opção de trabalhar guiado a eventos.

 

Então, vamos entender essa ideia principal. A primeira coisa que você tem que entender é que os eventos acontecem sempre no passado. O usuário foi criado, a compra foi realizada, o caminhão saiu para entrega, o e-mail foi alterado, a senha foi alterada, a requisição foi feita. E o que acontece? Toda vez que acontecer um evento no seu sistema, esse evento vai ser publicado em um sistema, em um mensage broker e esse message broker vai disponibilizar essa mensagem para outros sistemas e esses sistemas vão pegar esse evento e vão processar. Então, vamos imaginar que o usuário fez a compra e quando ele fez a compra, o sistema que vai dar baixa no estoque lê e fala: “baixado no estoque”, gera um outro evento, aí o sistema de nota fiscal fala: “opa, foi baixado no estoque, portanto, nota fiscal gerada”, aí a nota fiscal gerada falou: “opa”, o sistema que faz a entrega fala: “nota fiscal gerada, eu vou fazer a entrega”, entrega foi feita. Opa! Baixa o status para o usuário ver e fala: “Pedido concluído”. Dessa forma, perceba, todos os eventos que acontecem são no passado e os seus sistemas pegam esses eventos e acabam processando. Legal?

 

O grande ponto é que nós temos diversos tipos de eventos e é isso que eu quero que você preste atenção nesse momento. Um tipo de evento que acontece é o famoso Event Notification. O que é o Event Notification? É apenas uma notificação de que alguma coisa aconteceu no sistema. Normalmente, esse evento é muito pequeno, normalmente aparece alguma coisa desse tipo: id=1 status aprovado e o sistema recebe, id=1 status aprovado. Então, ele faz algum processamento ali com essa informação. Agora, um ponto importante sobre Event Notification é que ele serve apenas para notificar que alguma coisa aconteceu, depois disso, esse evento não serve para mais nada. Logo, esse evento é pequeno e normalmente depois que ele acontece, ele é jogado fora. Normalmente eu faço essa brincadeira: Imagina que eu estou gravando esse vídeo aqui para você e a minha esposa chega ali na porta, pega um post-it, joga aqui na minha mesa e eu estou falando com você. Eu pego, olho o post-it e está escrito assim: “O jantar hoje é no japonês às 18h00. Peguei esse post-it, joguei no lixo e continuo falando, por quê? Porque eu sei que agora eu vou sair, vou jantar no japonês hoje, eu não preciso armazenar essa parada. Porque que eu vou guardar um monte de post-it da minha esposa? Não faz sentido, entende? Porque é uma simples notificação. Isso é uma coisa, Event Notification. É o que mais acontece de forma geral nas empresas, porque você fica mostrando a mudança de estado de um sistema.

 

Agora, nós temos um outro tipo de evento aqui, que nós chamamos de Event Carried State Transfer. O que isso significa? Aí a coisa é diferente. Por quê? Porque o Event Carried State Transfer traz os dados completos daquele evento. Então, agora que não é mais só compra realizada, ele vai trazer que a compra foi realizada, que o produto é aquele, que as condições de pagamento são aquelas, que as parcelas vão ser aquelas e você vai guardar todas essas informações, porque essas informações são importantes para processamentos futuros ou qualquer coisa desse tipo. Logo, perceba que nesse caso não é mais um simples post-it que você joga fora. Vamos imaginar que eu acabei de comprar uma casa e eu vou receber a escritura dessa casa, a escritura é um evento e é um documento importante que tem todos os dados da minha casa. Então, o Event Carried State Transfer é exatamente a escritura de alguma coisa. É o evento de algo que aconteceu? Sim! Mas você tem os dados completos ali para utilizar, entende? Então, tem uma diferença muito grande de falar que a casa foi comprada, e o ID da casa e tal, ou pegar a escritura da casa que foi comprada. São informações diferentes que você utiliza em casos diferentes, entendeu?

 

Portanto, esse tipo de evento é bem importante e você tem que, quando está trabalhando em uma empresa, conseguir discernir se você apenas vai mandar uma mensagem de um sistema para o outro com alguma notificação, ou se você realmente está mandando os dados de eventos completos para que um outro sistema possa fazer o processamento, armazenar essa informação, não interessa como que isso vai acontecer. Legal? Então, isso é importante e, inclusive, isso está no blog do Martin Fowler, depois eu deixo o link para vocês. E, também temos algo que chamamos de Event Sourcing. Basicamente, a bem grosso modo que eu vou passar aqui, o Event Sourcing grava tudo que acontece, todas as mudanças de estado dos eventos que acontecem no seu sistema em um banco de dados. E o que acontece? Uma vez que você tem todas essas mudanças de estado, você consegue, se pensar bem, refazer todo o processamento do sistema, desde o dia 1 até o momento atual. Por quê? Porque se você tem todas as mudanças de estado, você consegue refazer todo o processamento até chegar no dia 1.

 

Eu vou dar um exemplo muito claro aqui, e eu acho que fica simples de entender. Quantas transações você acha que já não aconteceu na sua conta bancária que você tem desde 2000? Sei lá quando você tinha na sua conta bancária. Agora, você acha que o extrato da sua conta bancária dos últimos 30 dias ou o seu saldo, ele pegou os dados desde quando você abriu sua conta até agora para calcular o seu saldo? Não! Provavelmente ele guardou isso em um cache ou ele gerou um snapshot nas informações dos seus últimos 30 dias para não ficar fazendo esse cálculo. Porém, o lance é o seguinte: vamos imaginar que dá um rolo muito grande no seu banco e o banco pede o seu saldo, pois ele não sabe mais qual é o saldo da sua conta. Como ele consegue gerar esse saldo novamente? Ele sabe! Se ele pegar todos os créditos e subtrair por todos os débitos, desde quando você abriu a sua conta, ele vai chegar hoje com o seu saldo completo. Então, fazer isso, todos esses dados de débito e crédito que você vai processando, você poderia dizer… Mas, obviamente, nesse caso, são transações mesmo de bancos de dados. Mas, a ideia do Event Sourcing é a mesma coisa. Você vai pegando o estado de algo que aconteceu no seu sistema desde o início, e como você tem todos os eventos do que aconteceu, você consegue reprocessar e chegar aos dados mais atuais.

 

Isso é muito poderoso. Por quê? Eu vou dar um exemplo: Nós temos um sistema que controla tudo o que o aluno faz na nossa plataforma. Mas, quando a gente fez esse sistema, não ficou legal a modelagem, nós utilizamos um banco de dados inadequado, vamos imaginar assim. A gente fez algumas coisas que não foram tão importantes ou que não demos tanta importância naquele momento, e chegou na hora H e deu ruim. Como que eu consigo resolver esse problema? Se eu tenho todos os eventos que aconteceram dos meus alunos no passado, eu posso criar um novo sistema, pegar todos esses eventos, reprocessar e chegar no estado atual. Logo, o Event Sourcing te ajuda nesse tipo de tarefa. Então, você tem o Delta, é a alteração de um estado para o outro, e para que você não tenha que ficar gravando os dados inteiros, você vai tendo sempre essas alterações de estado que você precisa. Um ponto importante: um evento emitido pode ser o gatilho de entrada para um outro sistema. Então, eu criei um novo produto, e o outro sistema precisa pegar esse evento para alguma coisa. Legal?

 

Tem alguns pontos importantes que é necessário entender, vou passar aqui de uma forma bem superficial. Mas, obviamente que durante todo o curso nós vamos ver isso de uma forma mais acurada. Você tem algo que a gente chama de coreografia e você tem algo que a gente chama de orquestração. O que isso significa? Quando estamos falando de coreografia, estamos falando exatamente disso que eu falei. Um sistema mudou um estado, que chama outro sistema, que chama outro sistema, e os sistemas vão se organizando de acordo com os eventos que são gerados. Por outro lado, temos o lado de orquestração. Vamos imaginar que você tem um sistema que orquestra essas mudanças, e o por que esse sistema orquestraria? Porque existem determinados eventos, existem determinadas operações que têm que acontecer em determinadas ordens e caso algum problema aconteça, você tem que conseguir desfazer essas alterações também em uma determinada ordem. Imagina que você comprou um produto, chegou lá na frente, na hora de emitir a nota da um problema e daí você fala: “Ops, eu tenho que falar para o cara que deu erro na hora do processamento”. Como que eu faço? Então, eu tenho que desfazer isso, desfazer aquilo e desfazer aquele outro. Logo, você tem que gerar um efeito de compensação e, obviamente, isso é bem complexo. Mas, é muito comum isso acontecer também. Legal? Entenda que os eventos também geram sempre efeitos colaterais e, eventualmente, esses eventos colaterais precisam ser orquestrados para que você consiga desfazer ou ter um plano B quando alguma coisa acontecer. Bom, é isso que eu queria falar de forma bem simples sobre arquitetura baseada em eventos. Agora vamos falar sobre Publish Subscribe. Vamos nessa?