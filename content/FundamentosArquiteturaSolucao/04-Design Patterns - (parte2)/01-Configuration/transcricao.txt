Bom pessoal, agora vamos a mais uma leva sobre Design Patterns, e o Design Pattern que eu quero seguir aqui com vocês é chamado Configuration. Por que esse cara se chama Configuration? Porque ele vai ajudar a mudar em tempo de execução, as configurações do seu software. Como assim mudar em tempo real as configurações do seu software? Olha só que interessante galera, vamos imaginar o seguinte: você tem uma aplicação e essa sua aplicação teve algumas mudanças em relação aos seus parâmetros. Então, vamos imaginar o seguinte: como que eu mudaria uma senha do banco de dados no seu programa? Vamos imaginar que a senha do banco de dados mudou e você tem que fazer essa alteração no seu programa. Você vai utilizar uma API de e-mail para enviar mensagens de confirmação e a senha ou o API mudou naquele momento. Como você vai fazer esse tipo de coisa? Você vai refazer o deploy da sua aplicação? Vai reiniciar totalmente a sua aplicação? Como agir nesse momento? Bom, a primeira coisa que você tem que ter em mente nesses casos aqui é o seguinte: tudo o que forem dados de credenciais, não necessariamente dados sensíveis, mas dados de credenciais, qual que é o URL daquela API? Quanto tempo eu tenho que ficar fazendo retrys? Todos esses dados que podem ser variáveis, o que você vai fazer? Você pelo menos vai deixar esses dados ou em um arquivo, um ponto env ou como variáveis de ambiente. Eu gosto muito de trabalhar com variáveis de ambiente. E o que acontece nesse momento? Alguns desses dados mudaram, então, o que muita gente faz é: “poxa, eu vou mudar os dados lá naquele arquivo ou na variável de ambiente e depois eu vou simplesmente rebootar a minha aplicação”.

 

Porém, na hora que você vai rebootar sua aplicação, sua aplicação fica fora do ar, entendeu? Ou se você vai refazer o deploy por conta desses tipos de coisas, sua aplicação vai poder também, eventualmente, ficar fora do ar ou você vai gastar um tempo desnecessário com isso. Logo, o que acontece aqui? Com o configuration, você vai ter simplesmente o seguinte: você vai ter a sua aplicação / um Endpoint que você ache que faça sentido, por exemplo, / Configuration. E aí, o que será feito nesse momento? Você, nesse endpoint, vai prepará-lo para que possa receber configurações. Então, você vai ter esses settings, esse serviço de configuration. Ele vai mandar uma requisição para você no / Configuration e na hora que você receber essa requisição, o que irá fazer? Você vai substituir, vai dar um boot somente nessas configurações. Assim, você não precisa rebootar a sua aplicação, não precisa refazer o deploy. Essa requisição aqui pode ser feita independente de protocolo. Normalmente, a galera usa HTTP, mas, por exemplo, você pode estar consumindo uma fila e toda vez que chegar uma mensagem nessa fila, o que você faz? Você recarrega as suas variáveis. Portanto, essa que é a ideia do configuration, e é uma ideia que, na minha opinião, é genial, porque você não gasta tempo. Simplesmente você recebe uma requisição e você reajusta todo seu sistema baseado nessa requisição. Maravilha? Essa é a ideia geral do configuration. Vamos nessa!

 