Bom pessoal, agora nós vamos falar sobre Pub Sub ou Publish Subscribe. O que ele faz? Qual é a ideia? A ideia principal sempre é o seguinte: você vai ter um tópico ou um canal, o nome que você queira chamar. Normalmente nós chamamos isso de tópico. O tópico é o local onde você recebe uma informação e é o local onde você publica uma informação. E para que eu quero saber isso? A gente não falou agora há pouco sobre a Event Driven Architecture? Então, trabalhar com Pub Sub pode ser uma das formas de conseguir receber esses eventos, porque você vai ter um local onde nós chamamos de topic e esse topic é onde alguém publica uma mensagem e alguém recebe essa mensagem. Então, como funciona? Eu tenho um sistema A, eu mando uma mensagem no sistema, por exemplo: compra aprovada, e essa compra aprovada interessa para diversos sistemas. Logo, o sistema B precisa pegar a compra aprovada para gerar a nota fiscal, o sistema C precisa da compra aprovada para dar baixa no estoque e o sistema D precisa da compra aprovada para enviar um e-mail. Assim, todos esses outros sistemas precisam da informação que o sistema A está enviando, e como ele envia? Ao invés do sistema mandar a mesma mensagem para o sistema B, para o sistema C e para o sistema D, seria um pouco insano. Ele manda uma mensagem para um tópico e o sistema B, C e D pegam essas mensagens do tópico para conseguirem ler.

 

Então, o sistema B, C e D ficam escutando o tópico, chegou a mensagem ali, eles pegam essa mensagem e fazem o processamento. Com certeza seria muito inviável o sistema A sair mandando mensagens para todos os sistemas que tem interesse nele, porque ele teria que entender todo mundo que depende dele e ele não precisa saber disso. Legal? E é por conta disso, que você consegue inverter essa dependência e fazer com que todo mundo que depende do A fiquem pendurados em um tópico, em um canal de recebimento e toda vez que o A publicar uma mensagem, o B, C e o D funcionam. Portanto, essa é a ideia quando estamos falando de Pub Sub ou Publish Subscribe. A ideia, o conceito é bem simples de entender e você consegue ter diversos sistemas de stream de dados que conseguem implementar esse padrão. Um exemplo é o próprio Apache Kafka, pois é um sistema extremamente poderoso. Os sistemas ficam ouvindo, a gente chama os sistemas B, C e D de consumidores, ou seja, são os caras que ficam consumindo essas mensagens e você chama o sistema A de produtores ou producers, que são os caras que ficam produzindo as mensagens que são enviadas em tópico. Bom, essa é a ideia do Pub Sub.