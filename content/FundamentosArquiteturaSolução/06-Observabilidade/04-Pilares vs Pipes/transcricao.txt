A observabilidade consegue perguntar o porquê as coisas estão acontecendo, mas você precisa entender que a observabilidade tem alguns pilares para que a gente consiga interpretar o que está acontecendo com alguma coisa. E aqui tem uma imagem que as pessoas da Elastic fizeram em uma apresentação, que é do Ricardo Ferreira. Na época que ele estava trabalhando na Elastic, ele fez esse slide bem interessante para você conseguir observar. Então, o que acontece? A observabilidade tem pilares. Mas o que eles falam? Eles falam o seguinte, não é bem pilares, porque pilares são coisas, vamos dizer assim, independentes, cada um tem a sua parte. Assim, o que eles querem dizer é que a observabilidade tem pipes, ou seja, canos, isto é, algo que a gente consegue conectar. Como assim? Olha só que interessante. Ele fala que você tem algo chamado Log, Tracing e Metrics. O que são logs? A primeira coisa para a gente entender: logs são eventos. E o que é um evento? Um evento é algo que aconteceu no passado, ou seja, o sistema botou, usuário criado, e-mail enviado, assim, tudo que aconteceu no passado são logs. E normalmente esses logs têm informações completas como a data que aconteceu, qual foi o servidor, qual foi a máquina, qual foi o erro que aconteceu etc. Então, essas informações são logs, que são eventos que os sistemas vão disparando para a gente conseguir olhar. Essa é uma parte, quando a gente fala de pilares da observabilidade, que é a parte de log. A gente vai entender o porquê ele chama isso de pipe. 

Outra coisa que a observabilidade tem é a parte de métricas. Métricas são qualquer medida que você acaba tendo, dados que você consegue agregar. Então, por exemplo, eu estou com 80% de memória RAM. A média da minha memória RAM é de 60%. Eu tenho 200 pessoas no meu site agora. Eu tenho 30 compras por minuto. Assim, você consegue medir tudo que dá para medir, você fala com métricas.

 E a gente tem essa outra parte que é chamada de tracing. Então, basicamente, o que acontece? O tracing é uma forma de você rastrear o que está acontecendo dentro daquela caixa preta. Vamos imaginar o seguinte, eu fiz uma request, essa request bateu no meu sistema, um monte de operação aconteceu e meu sistema está demorando. Quando eu consigo olhar essa request, vendo por todas as entranhas, vamos dizer assim, do meu software, posso falar o seguinte: “olha, aqui demorou porque eu tenho uma consulta no banco de dados que está demorando 5 segundos, então, já era”. Percebeu o que eu estou conseguindo dizer? Então, a rastreabilidade, o tracing, permite que você veja o caminho de uma requisição lá dentro. Mas não somente o caminho, o escopo e o contexto, porque eventualmente eu posso ter diversas requests e cada request tem um pedido diferente. Às vezes, eu tenho uma request que passa por diversos sistemas, então, eu tenho que conseguir acompanhar uma única request dentro de um contexto. Por exemplo, criar uma nova conta. Então, eu tenho que pegar essa request, passar para o sistema 1, passar para o sistema 2 e se no sistema 3 ela deu um erro, eu tenho que saber que ela deu esse erro baseado no contexto por onde ela passou, que são esses três sistemas. Então, essa é a ideia quando a gente está falando de rastreabilidade. 

Normalmente, quando a gente fala de pilar da observabilidade, a gente está falando de tracing, métricas e log. O que as pessoas da Elastic estão falando? Além de você ter essas três áreas, essas três áreas têm momentos em comum. E esses momentos em comum são o que eles chamam de pipes, ou seja, porque existe um ponto de intersecção naquele momento. Por exemplo, meu sistema deu um erro. Na hora que esse meu sistema deu um erro, ele gerou um log de um tracing falando que o erro foi porque não conseguiu inserir o dado no banco. Eu consigo ver naquele momento quanto estava. Ou seja, o quanto o meu banco de dados estava ocupado naquele momento com relação à memória. E ao mesmo tempo, eu consigo ver qual foi o comando de inserção no banco de dados através do meu tracing. Então, você consegue naquele instante, naquela request, ver qual log ela gerou, o que aconteceu com ela e como estavam as métricas naquele momento. Você não observa as coisas apenas de forma separada. Eu observo as coisas com os dados em conjunto. Quando eu olho dados em conjunto, eu tenho o contexto e quando eu olho o contexto, as coisas ficam mais fáceis. Eu vou dar um exemplo para você. Vamos imaginar que eu fiz uma requisição e eu vou olhar no tracing. Ela mostrou para mim que demorou para inserir nos dados no banco. Eu quero pensar: “poxa vida, por que demorou para inserir?” Então, naquele momento, eu vou ver quanto estavam as métricas e eu vou ver que naquele momento o CPU do meu banco de dados estava em 100%. Com isso, eu falo: “ops, não inseriu porque as métricas estavam zoadas por conta do meu banco de dados”. Ou não inseriu porque, olhando no log, houve um erro de conexão. Você entende como essas coisas se conversam? Assim, quando a gente fala de pilar, a gente fala normalmente de coisas separadas. Quando a gente fala em pipes, é porque os dados fluem de uma forma que você consegue capturá-los e ver o contexto deles. Através dessa interconexão entre esses dados você consegue ter uma informação integrada. Quando você consegue olhar uma informação integrada, você tem o contexto. E quando você tem o contexto, você consegue tomar uma decisão melhor. Porque, às vezes, um simples log não vai representar muita coisa. Às vezes, simplesmente saber que o seu CPU estava 80% não vai ajudar em muita coisa. Ou simplesmente olhar que o seu banco de dados também estava com problema. Maravilha? Então, é isso!

