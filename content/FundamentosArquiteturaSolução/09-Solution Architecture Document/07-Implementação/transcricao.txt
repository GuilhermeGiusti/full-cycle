Bom, pessoal, agora a gente vai para a parte de implementação. Como funcionam esses tópicos na hora de documentar? Eu vou documentar como funciona a implementação? Vamos lá! O que acontece é o seguinte: na implementação, coloco quais metodologias de desenvolvimento e ferramentas eu vou utilizar. E é isso! A gente tem que tomar muito cuidado, pois tem muita gente que pensa: “ah vamos trabalhar com Scrum. Ah, vamos trabalhar com não sei o quê”. Cada empresa tem a sua metodologia. Eu tive a oportunidade de visitar, um tempo atrás, a sede do Facebook. E, assim, é um lugar gigante, com uma pancada de prédio, muitos funcionários e o refeitório deles era maior do que várias empresas juntas que eu já trabalhei. Batendo um papo com uma pessoa, eu perguntei: “meu, e qual é a metodologia que vocês trabalham aqui dentro para conseguir fazer os projetos rolarem?” Então eu falei: “como é essa metodologia? Eu falei: “ah, sei lá, Scrum? Você usa metodologia ágil?” A pessoa virou para mim e falou: “assim, ah, cara, isso aí pouco importa. O importante é o projeto saber. A gente trabalha com equipes pequenas, de 8 a 12 pessoas, e a gente se vira para conseguir entregar aquilo da melhor forma possível. Se vai rabiscar na lousa, se vai fazer isso ou aquilo, não interessa. Cada equipe trabalha da sua forma e cada um entrega da melhor forma possível”. Então, o que a gente tem que entender é que a empresa tem que fornecer um norte de como as pessoas trabalham em conjunto. Mas a empresa não pode fazer com que muitas metodologias acabem gerando, vamos dizer assim, uma perda de flexibilidade dos desenvolvedores para trabalharem rápido. Eu não estou dizendo que Scrum vai acabar com a flexibilidade ou qualquer coisa assim, de forma nenhuma, mas o grande ponto é que é uma tendência muito grande cada empresa trabalhar com os seus diversos tipos de metodologia e com as suas ferramentas. E cada dia mais, os times estão tendo mais flexibilidade para se organizar em relação a isso. Então, tome cuidado em como isso vai ser gerado. Tem empresas que nessa parte nem fala e nem define qual é a metodologia, porque sabe como é que a banda toca na empresa. 

Outra coisa, agora isso não tem como. Processos de deployment e infraestrutura. Isso são pontos extremamente críticos. A gente vai falar de infra, quando a gente fala em infraestrutura, a gente já volta lá no começo. É um premise. Ou seja, é cloud. Qual cloud? Você fechou algum contrato com a cloud provider? Quais são os descontos que você recebeu? Você estava um premise e quer ir para um cloud? Vamos tentar fechar um contrato para barganhar preço? Uma coisa que você tem que se acostumar é que muitas pessoas entram, olham aquela tabelinha de cobrança da AWS, da Google, da Azure e pensam que aquele ali é o preço deles. É o preço dele, mas se você estiver dentro de uma grande empresa, aquele preço não é o preço que eles vão te cobrar. Você vai sentar, vai falar com o gerente de contas, você vai fechar um contrato de tantos anos e, então, aqueles preços vão ser muito reduzidos. Portanto, você vai ter que saber negociar. Por isso, quando a gente fala em infraestrutura, depende muito também do contexto, do tipo de projeto e do tipo de contrato que você tem, por exemplo, com cloud provider. É o arquiteto de solução que vai negociar isso? Não. Raramente vai ser essa pessoa. Mas normalmente ele é a pessoa que vai falar quanto de infraestrutura você vai precisar ter para conseguir passar uma estimativa para quem for negociar com o cloud provider. Processo de deployment. Mesma coisa: Como vai ser feito? Quais são as ferramentas que a empresa já tem? Como os desenvolvedores estão acostumados a realizar? Então, isso vai depender do contexto. Outro ponto aqui, são os processos de teste de qualidade. Isso varia de empresa para empresa. Quando eu estou falando de processos de teste, não é necessariamente apenas o teste de software que o desenvolvedor tem que fazer. Eu já estou partindo do princípio que toda empresa tem que testar o seu software no processo de desenvolvimento. O teste de desenvolvedor, da pessoa que está desenvolvendo o teste,  o software dele já tem que sair com o teste. Agora quando a gente está falando de um processo de teste de qualidade, a gente está falando da galera do IKEA, a gente está colocando metodologias um pouco diferentes. Por exemplo, toda vez que eu subo a minha feature, essa feature sobe isolada no ambiente. Então ,a galera do IKEA consegue testar somente aquela nova feature, independente de outra feature que também está desenvolvendo. Assim, esses tipos de coisas são extremamente importantes também.

 Então, pessoal, lembre-se do seguinte: todas as vezes que a gente fala em teste de qualidade, eu não necessariamente estou falando do teste que o desenvolvedor está fazendo. Estou sempre partindo do princípio que todos os desenvolvedores da empresa têm que ter códigos orientados, guiados a testes. Não estou dizendo que tem que seguir TDD na risca, mas tem que ter teste. Isso já não existe mais. O que normalmente você pode colocar  nesse processo é tentar seguir uma norma, um guideline falando: “olha, eu preciso ter 70% de cobertura de testes na hora que eu for entregar, para que lá na hora de eu colocar no meu pipeline ele possa bloquear em cima disso”. Então, isso vai depender de contexto para contexto. Às vezes o projeto, a solução que vai ser colocada é baseada em cima de uma solução que já é legada e que não tem teste. Então, nada é simples nesse mundo. Tudo depende do contexto. “Ah, eu tô num projeto que tem 20% de teste. Nossa, só teve isso? Não, o projeto tem 30 anos que foi desenvolvido”. Entende como as coisas são diferentes nesses casos? Então fiquem ligados.