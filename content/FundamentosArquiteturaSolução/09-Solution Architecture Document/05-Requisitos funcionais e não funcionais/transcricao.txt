Agora que a gente já falou um pouquinho sobre a visão geral da arquitetura, de diagramas,  e sobre documentar o que importa, a gente vai falar sobre outro ponto. E essa é a parte que, na minha opinião, é mais “cabeluda”. Porque a gente vai falar sobre requisitos. E quando a gente fala sobre requisitos, a gente fala de requisitos funcionais. São requisitos que fazem referência a como a aplicação vai funcionar, os recursos que a aplicação vai ter, como esses recursos funcionam e quais são as principais regras que isso tem. E é nesse ponto que o “bicho pega”. Porque, às vezes, você pega arquitetos, principalmente da época um pouco mais tradicional, que você passava meses e meses só definindo esses requisitos, antes de desenvolver uma linha sequer de código. O pior ponto é que, normalmente, esses requisitos mudam muito. O cliente, na hora que está falando com você, pensa que aquela ideia que ele teve está correta, mas quando vai implementar ele fala: “mas era melhor daquele jeito? E ‘morreu’ o requisito”. Então, nos requisitos funcionais colocamos as principais funcionalidades do sistema, como elas funcionam e o que é esperado em relação a elas. Coloque também sempre algum tipo de observação falando que caso isso não funcione, pode impactar tais outras funcionalidades ou qualquer coisa desse tipo. Então, requisitos funcionais são recursos, funcionalidades, features que vão agregar valor ao negócio. Quando eu falo agregar valor, normalmente a gente está falando sobre diferencial competitivo. Como eu disse para você, o FAQ é uma feature importante. Pois a pessoa vai lá e tira as suas dúvidas. Ela é um feature que não vai agregar valor como fazer uma compra. Então, você vai colocar, principalmente, os principais requisitos. Obviamente que FAQ é uma coisa que vai ter no sistema, você vai colocar. Mas você não vai detalhar essa feature da forma como você vai detalhar um requisito tão importante como realizar uma compra.

Requisitos não funcionais são performance, escalabilidade, segurança, disponibilidade e Cross-cutting. Cross-cutting é qualquer coisa que corta a aplicação do início ao fim. Requisitos que sempre vão estar ali na aplicação. Então, esses tipos de requisito são importantes. Você tem que ter, por exemplo, uma previsão de quantas pessoas vão acessar, de quantas requisições vai trabalhar, de qual é a performance vai ter no meu sistema, como que eu vou trabalhar com a parte de segurança, como eu que vou processar seus pagamentos, como eu vou guardar dados de cartão, ah, eu tenho que ser PCI compliant, então, esses tipos de coisa são extremamente importantes. E, assim, novamente muita gente vai perguntar: “Wesley, mas como eu vou calcular a performance e setar um requisito de performance de um sistema que nunca foi ao ar?” Essa é uma boa pergunta. Ótima pergunta. E essa pergunta pega todo mundo. Porque tem empresas que já estão consolidadas. E essas empresas, normalmente, já têm uma projeção de quantas requisições vai receber, de como é o fluxo, o pico etc. Ela tem sazonalidade, então, você já consegue gerar uma previsão disso. Agora, se você tem uma empresa que está sendo criada, uma área, um business unit que está sendo criado agora e você não tem previsibilidade nenhuma, você vai ter que pelo menos, e podem falar o que quiser, essa é a minha opinião… você vai ter que dar ao menos um chute. Mas não somente dar um chute, você vai ter que dar um chute de quanto a sua aplicação, baseado em tanto de hardware, em tanto disso ou daquilo, vai suportar. Então, não adianta falar: “ah, eu vou botar tanto de máquina”. Não, as perguntas devem ser: “se você botar tanto de máquina, quantas requisições ela vai aguentar? Qual que é o throughput que ela vai aguentar? Qual vai ser a latência que ela vai ter? Quantos milissegundos ela vai conseguir responder?” Então, se você for dar chute, não tem problema. Dá o seu chute. Faz um teste de carga e vê esses resultados. Faz uma projeção desses resultados. Portanto, o chute é importante quando você não tem de onde partir. 

Mas não é só porque você não tem de onde partir que você não consegue fazer uma projeção. Por exemplo, se eu tiver mil usuários simultâneos, eu vou ter que ter essa quantidade de recursos. Então, isso é importantíssimo para você saber. Não adianta só chutar e botar no ar. Faz um teste de performance e  um teste de carga para você conseguir ter pelo menos uma ideia de quanto você consegue baseado naquilo. Se vier muito mais requisição, você vai conseguir, vai ter que escalar, mas você já viu esse sistema de alguma forma, você não partiu do momento zero. Esse é um dos pontos importantes de requisito funcional ou não funcional. Essa parte é a que mais “pega”. Normalmente, documente mais o que importa. Se você for dar um chute, dê um chute, mas traga dados. Esse aí é um ponto importante para vocês.