Bom pessoal, no vídeo anterior falamos sobre N-tier e N-Layer Architecture e agora vamos falar um pouco sobre Multi-tenant Architecture. Lembrando que quando a gente está falando de uma arquitetura multi-tenant, não necessariamente você tem que estar utilizando uma arquitetura baseada em camadas, poderia ser apenas uma aplicação, uma camada só, etc. Mas, aqui eu estou aproveitando o desenho anterior. O que é Multi-tenant? Basicamente, quando estamos falando isso em inglês, é a pessoa que aluga uma casa, um quarto, ou seja, um inquilino. E o que o Multi-tenant faz? Significa que o seu sistema pode ter, entre aspas, diversos inquilinos, ou seja, diversos usuários que fazem parte de organizações diferentes. Como assim? Olha só que interessante. Imagina que eu tenho um sistema de gestão financeira e esse sistema de gestão financeira quer atende diversas empresas. Mas, eu não quero disponibilizar ou fazer um Deploy do meu sistema para cada empresa, porque fica difícil de dar manutenção. Então, quando a gente está trabalhando com multi-tenant, significa que eu vou ter um único sistema, uma única aplicação. Obviamente, ela pode escalar e tudo mais, mas, para diversos tipos de usuário. Agora, olha só que interessante. Vamos imaginar que eu tenho a empresa 1 querendo usar o meu sistema e eu tenho a empresa 2. O que acontece? Eu vou chamar a empresa 1 de tenant ID = 1 e a empresa 2 de tenant ID = 2. Logo, essas duas empresas acessam, geram transações e armazenam dados. Mas esses dados não podem ser vistos ou compartilhados entre as empresas. Cada empresa vê apenas os seus dados. Isso é muito comum quando a gente está trabalhando com a plataforma SaaS de software as a Service.

 

Então, o que acontece? A empresa 1 acessa a parte de presentation e a empresa 2 acessa a parte de presentation para começar a trabalhar na aplicação. E o que acontece? É passado o tenant ID dessas empresas. Dessa forma, com tenant ID eu consigo identificar qual a empresa que está querendo acessar ou executar qualquer tipo de transação. E aí, no outro lado, eu tenho algumas formas, alguns approaches de como que eu vou armazenar esses dados. Então, o que pode acontecer? Pode ser o seguinte: eu uso uma única aplicação, mas na hora de salvar os dados, eu crio dois bancos de dados, um banco para a empresa 1 e um banco para a empresa 2. Assim, na hora de guardar, eu sei que o ID é 1, e salvo no banco de dados 1, na hora de salvar eu sei que o ID é 2 e eu salvo no banco de dados 2. Legal? Essa é uma abordagem. Uma outra abordagem é trabalhar da seguinte forma: com tabelas diferentes. Logo, vamos imaginar que eu tenho a tabela de produtos, eu crio a tabela de produto 1 e a tabela de produto 2. Na tabela de produto 1, eu tenho todos os produtos da empresa 1 e na tabela de produtos 2 eu tenho todos os produtos da empresa 2. Portanto, essa é mais uma abordagem, certo?

 

E uma terceira abordagem, que normalmente é a mais comum pelo que eu vejo, é em relação a tabelas, o que significa? Eu tenho uma tabela produtos e na tabela produtos eu vou ter uma chave primária, composta provavelmente, que vai ter, qual é o ID do tenant? Assim, eu vou ter tenant ID 1 e tenant 2. Isso significa o quê? Que na hora que eu vou listar os produtos para a empresa 1, eu sei que o ID dele é 1. Dessa forma, ele vai dar um select asterisco from products, onde o tenant ID = 1 e daí ele vai trazer somente os produtos dele. Qual é a melhor decisão aqui? Vai depender muito da quantidade de dados, do tamanho de cada empresa ou qualquer coisa desse tipo. Vou dar um exemplo: Vamos imaginar que eu tenho 1.000 empresas como clientes e essas 1.000 empresas são mais ou menos todas do mesmo tamanho. Então, conforme elas vão acessando e têm mais ou menos a mesma quantidade de acessos, você vai escalando o banco de dados, vai escalando a aplicação e tudo bem. E daí você faz uma separação por chave primária, igual essa última opção que eu mostrei aqui e vai funcionar perfeitamente. E, de repente, faz de conta que a Coca Cola vai virar seu cliente também. O que pode acontecer nesse tipo de situação? Pode acontecer que o tráfego da Coca Cola seja tão grande que vai fazer com que os outros usuários da plataforma sejam prejudicados, o sistema fica um pouco mais lento. Pode acontecer também que, por questões de governança, a Coca Cola fale o seguinte: “Eu não quero que no meu banco de dados tenha dados de outras empresas por questões de regulamentação”.

 

Logo, o que você pode fazer? Você pode fazer o seguinte: pode pegar a sua aplicação, quando for o cliente Coca Cola, você manda acessar o banco de dados 1, quando forem todos os outros clientes, manda fazer a separação por tipo de chave primária ou por tipo de tabela. Entende? Não existe uma única regra, você pode brincar de acordo com o que você quer trabalhar. Então, eventualmente, você pode pegar a Coca Cola e gerar um Deployment totalmente diferente para ela, para que ela fique em um ambiente totalmente isolado e que todos os outros clientes fiquem em um outro ambiente isolado. Sacou o que eu estou dizendo? Portanto, quando estamos trabalhando com Multi-tenant, o importante é entender que existem essas opções de bancos de dados, tabelas e chaves primárias para você conseguir fazer a separação dos seus tenants. Galera, nada é escrito em pedras. O importante é você saber de acordo com o contexto da empresa, “Olha, a minha empresa só vai resolver clientes muito grandes”. Então, como que eu vou fazer? “Ah, não, eu vou atender o público, gerar um monte de micro empresa”, então eu vou trabalhar de outra forma. Contexto é tudo galera, beleza? Um grande abraço e até o nosso próximo vídeo.

