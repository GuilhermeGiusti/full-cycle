Bom pessoal, agora vamos falar sobre Serverless. É uma febre danada sempre quando nós falamos sobre Serverless, mas infelizmente algumas pessoas não entendem alguns conceitos e acabam pensando que Serverless não passam de Lambda Functions. Vamos entender como é que funciona toda essa história. Desde quando a gente conhece servidores de hospedagem, depois a gente sabe que a gente tem Cloud Providers, a WS, Oracle, Azure, GCP e tudo mais. Você paga conforme os recursos que você está utilizando. Se eu subo uma máquina, eu vou pagar por uma máquina, pelo tempo em que essa máquina está ligada. Agora, seria muito bom poder pagar apenas quando eu uso a máquina na minha aplicação. Como assim? Vamos imaginar que o meu site não tem nenhum acesso da meia noite às 06:00h da manhã. Seria muito legal eu poder desligar o meu servidor essa hora para não gastar. O problema é que se eu desligar o meu servidor e o Pedrinho quis começar a trabalhar mais cedo e foi pegar alguma coisa na aplicação, a aplicação não poderia estar fora do ar. Então, o que eu faço como efeito colateral? Eu mantenho sempre a minha aplicação funcionando e pago por isso. Agora, quando nós estamos falando no universo Serverless, significa que eu vou pagar somente pelo que eu realmente uso, somente pela minha demanda.

 

Então, por exemplo, se o Pedrinho acessar o meu sistema às 03:00h da manhã, quando o Pedrinho acessar, eu vou pagar pelo acesso do Pedrinho. Se ninguém mais acessar, eu não pago. Quando chegar no dia seguinte e milhões de pessoas estiverem acessando, o que vai acontecer comigo? Eu vou pagar somente pelo que for utilizado, assim, parece uma forma bem justa e interessante de você utilizar isso. O grande ponto é que Serverless não engloba apenas a sua aplicação quando a pessoa acessa. Serverless é um conceito geral de serviços que incluem diversas opções quando você está trabalhando com Cloud Providers. Logo, o que eu estou querendo dizer é que Serverless não necessariamente é uma Lambda Function. Vamos trazer um exemplo mais realista: Imagine que eu tenho uma aplicação e eu fiz o Front End dela em Reac, aí o que eu fiz? Peguei esse front end, subi lá na WS S3. Beleza? Quando eu subir, o que eu estarei ocupando lá na S3? Espaço. E a WS vai me cobrar pelo espaço de eu colocar aquela aplicação lá. Normalmente é algo bem barato. Logo, o que vai acontecer quando alguém acessar essa minha aplicação? Eu vou receber uma ação de entrada e vou trafegar dados de saída. E o que a Amazon vai fazer? Ela vai me cobrar pela entrada e pela saída de tráfego. Se uma pessoa acessar, eu vou pagar pela sua entrada e saída. Se 1.000 pessoas acessarem, vou pagar por 1.000. Se 1 milhão, se 10 milhões ou 50 milhões acessarem, eu vou pagar por isso. Legal? Ou seja, estou pagando somente pelo que eu for usar. Se ninguém acessar, eu não pago. 

 

Então, o que acontece? Eu fiz a minha aplicação React, e o que essa aplicação React vai fazer? Ela vai apontar para um back end, mas esse back end não é uma aplicação inteira, eu criei ele em um formato de uma função, ou seja, uma Lambda Function. O que significa que ao invés de eu deixar a minha máquina ligada o tempo inteiro, ela só vai ser ligada quando eu receber uma requisição. Porém, o meu S3 não vai conseguir acessar, necessariamente, direto uma Lambda Function. Ele vai ter que cair por uma camada e essa camada pode ser uma API Gateway. A API Gateway funciona da seguinte forma nesse caso: quando a pessoa acessar / home API Gateway e falar: “Ah, quando for / home vai cair nessa Lambda Function”. Quando bater na Lambda Function, a Lambda Function vai subir pela primeira vez. Normalmente, essa primeira vez demora um pouco mais, é algo que a gente chama de Cold Start, mas, depois ela consegue responder todas as requisições rapidamente e eu só vou pagar pelas requisições que eu utilizar.

 

Portanto, eu não estou pagando por hora, estou pagando por uso e isso pode fazer eu economizar milhões de dólares nesse caso. A API Gateway, por sua vez, eu também só vou pagá-la pelos acessos que ela fizer esse roteamento para mim. Se eu não utilizar, eu também não pago, e isso é Serverless. Depois disso, o que acontece? Todos os acessos da minha API Gateway, eu quero guardar um log, um registro de tudo que está acontecendo. Então, eu uso, por exemplo, um Cloud Trail ou alguma coisa desse tipo para guardar os logs de tudo que aconteceu. Se eu não tiver acesso, eu não tenho o log, se eu não tenho o log, não tenho que pagar. Se eu tiver acesso, eu gero os logs e pago pelos logs que eu guardar. Mesmo esquema, Serverless, no final das contas, significa que você não tem que tomar conta e se preocupar com os servidores, com a parte de operação. Você vai se preocupar apenas em focar na sua aplicação e vai pagar sobre demanda. Aí o que acontece? A minha Lambda Function chamou outra Lambda Function, então só vou pagar pela chamada dessa Lambda Function. Legal? E essa minha outra Lambda Function vai chamar quem? O S3 para pegar algum arquivo, algum registro no S3 e eu pago também pelo acesso do S3.

 

E por último, a minha Lambda Function vai utilizar o DynamoDB para persistir informações, para recuperar informações, e no DynamoDB também, eu vou pagar apenas pelas leituras e pelas gravações que eu vou fazer. Eles têm uma forma de cobrar, então eu só vou pagar meu banco de dados pelo o que eu usar. Portanto, quando estamos falando em Serverless galera, não estou falando apenas em Lambda Functions. Quando eu estou falando em Serverless, significa que eu não vou ter que me preocupar com dimensionamento de infraestrutura, deployment de infraestrutura e pagar por algo que eu não estou utilizando. Significa que o Cloud Provider vai provisionar e deixar tudo pronto para mim e ele vai me comprar on demand conforme o uso. Logo, Serverless vai desde o S3 até uma Lambda Function, até um banco de dados. Serverless não é apenas Lambda Functions. Esse é o conceito básico de Serverless. Obviamente, nós vamos ter uma área, uma disciplina que vamos focar em Serverless em si. Assim, a gente consegue ver com mais detalhes. Mas, é importante você entender esses conceitos agora. Fechou? Um grande abraço.

