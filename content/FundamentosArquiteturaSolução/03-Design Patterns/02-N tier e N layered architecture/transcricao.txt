Bom pessoal, é o seguinte: agora vamos começar a falar de alguns design patterns que são importantes você saber que eles existem. A primeira coisa que vamos falar é sobre N-tier ou N-layer ou tier layer and architecture. O que significa isso? Significa arquitetura baseada em camadas em português. Eu acredito que algum dia você já deve ter ouvido falar, se você já o viu, não tem problema, tamo junto! A Arquitetura baseada em camadas significa que eu crio camadas separadas para minha aplicação. Vamos imaginar que eu crio um layer de presentation, um layer de application e um layer de data. O que isso significa? Significa que no layer de presentation eu vou ter um sistema, uma aplicação e essa aplicação pode escalar, inclusive. Então, por isso que eu posso ter diversos web ali, que você está vendo nesse slide. E o que acontece nessa Presentation Layer? É um layer que vai focar em apresentação. Pode ser um front end feito em React, pode ser uma parada que está usando um framework que faz server side rendering. Não tem problema. O grande ponto aqui nesse tipo de arquitetura é que essa parte de exibição é desacoplada da parte das outras áreas da aplicação, da mesma forma que a gente tem a parte de aplicação. A aplicação vai rodar as regras de negócio, as orquestrações dos processos e tudo o mais.

 

E isso também são aplicações separadas e elas podem escalar também, ou seja, posso ter diversos sistemas rodando as minhas aplicações de uma forma desacoplada da minha área de apresentação. Logo, esse é aquele back end ali que vai resolver os problemas. E, eu tenho aqui também um tier só referente a data, então eu posso ter os meus bancos de dados, posso ter os meus bancos de dados utilizando sharding, posso estar trabalhando com réplicas ou tenho uma escrita, os outros fazem leitura e tudo mais. Mas, o grande ponto é que você tem que entender que esses três layers funcionam de forma independentes. Além de funcionar de forma independente, cada um tem as suas permissões de acesso diferentes, as suas regras de segurança diferentes. Então, por exemplo, a parte de apresentação pode estar totalmente disponível para a internet, mas a parte de aplicação é banco de dados e fica para dentro de uma sub rede que não tem acesso direto a internet. Talvez a gente possa trabalhar dessa forma. Assim, eu posso proteger isso de forma diferente. Da mesma forma, na parte de banco de dados eu posso ter permissionamentos e regras diferentes.

 

Uma coisa bem comum quando estamos falando com esse tipo de arquitetura é que nós temos a comunicação ponto a ponto. O que isso significa? Significa que quando a parte de web precisa de alguma coisa, ela bate na parte de aplicação e a aplicação, eventualmente, se ela precisar pegar algum dado, ela vai pegar esses dados do meu banco de dados. Logo, o banco de dados provavelmente vai retornar isso aí para minha aplicação e vai retornar isso para a parte de web. Quando o fluxo dessa aplicação funciona dessa forma, normalmente a gente chama de Closed Ring. O que isso significa? Significa que a minha parte de apresentação não vai bater direto lá no meu banco de dados, ela sempre tem que passar pelos layers da minha aplicação. Legal? Porém, existe um outro approach que eventualmente pode fazer com que você dê um bypass em uma camada e acesse uma camada diretamente. Então, por exemplo, aqui quando estamos trabalhando de forma open, significa que a minha apresentação, eventualmente, poderia consultar o meu banco de dados diretamente. Logo, não significa que, pelo fato da minha apresentação estar batendo no meu banco de dados diretamente, significa que ela está errada. Significa que é um approach que você está utilizando nesta arquitetura baseada em camadas. O que normalmente é mais recomendado que você siga todas as camadas ali da sua aplicação. Mas, é importante saber que isso acontece. Existem decisões que podem fazer com que você dê um bypass. 

 

Agora, o que é o certo? O que é errado? Galera, não existe certo e não existe errado. Se formos pensar mais em boas práticas, é legal você passar por todos os layers. Mas é aquela história, né? A diferença, muitas vezes, de um desenvolvedor mais sênior, para um desenvolvedor mais pleno, é que o desenvolvedor mais sênior, sabe o momento que ele pode tomar esses tipos de decisões, que façam coisas que normalmente muita gente considera errado. Mas, ele faz isso com consciência, sabendo que ele está fazendo isso, sabendo os efeitos colaterais que acontecem. Portanto, vamos pensar daqui para frente que toda decisão de arquitetura que a gente tomar, se você não souber explicar o por que está tomando essa decisão, significa que você ainda não está pronto para implementar esse tipo de arquitetura. Significa que você precisa um pouquinho mais de repertório, e está tudo bem, você vai estudar mais, vai ter mais contato com pessoas que fazem isso. Mas, é importante saber desse tipo de detalhe. Beleza? É isso aí pessoal. Nós falamos aqui sobre arquitetura em camadas, N-tier e em N-Layer ou Layer Architecture. Então vamos lá para o nosso próximo design Pattern.