Bom pessoal, agora nós vamos falar sobre o tal dos microsserviços, a arquitetura baseada em microsserviços. Disclaimer, novamente galera, eu não quero olhar nos detalhes sobre microsserviços agora, eu quero te dar uma visão geral. A gente vai ter uma disciplina específica sobre microsserviços, ok? Mas, o que são microsserviços? A primeira coisa, microsserviços escreve com dois ss, tudo junto. segunda coisa, microsserviços são sistemas que normalmente têm responsabilidades específicas e essas responsabilidades podem ser projetos totalmente diferentes dentro de uma organização. Alguns projetos podem ter relacionamento entre eles, então, pode acontecer que um microsserviço tenha que chamar outros microsserviços diretamente. Porém, o que acontece? Isso tem vantagens e desvantagens. A vantagem é que quando eu separo tudo isso, fica mais fácil inclusive organizacionalmente eu criar diversas equipes, por exemplo. Porém, quando um microsserviço chama o outro e o outro estiver fora do ar, o microsserviço que chamou também vai ficar fora do ar e isso pode gerar um efeito dominó muito grande dentro da organização. Porém, um outro ponto importante é o seguinte: se nós pensarmos nesse lado, a coisa mais importante que a gente tem que fazer quando nós trabalhamos com microsserviços é lutar contra o acoplamento. O que é o acoplamento? Fazer um microsserviço depender de outro microsserviço diretamente. Como evitamos esse tipo de acoplamento, galera? Primeira coisa, banco de dados. Se os microsserviços compartilham o mesmo banco de dados, significa que se um microsserviço encher um banco de dados de acessos e deixar este banco de dados lento, o outro microsserviço que vai utilizar esse banco de dados também vai ficar lento. Se alguém mudar uma coluna inadvertidamente de um microsserviço vai quebrar um outro microsserviço.

 

Então, por isso que é muito comum nós termos um banco de dados por microsserviço. Se você tiver vários utilizando um banco, saiba as consequências que você vai ter. Legal? Porém, mesmo assim, quando um microsserviço chama o outro de forma síncrona, ou seja, diretamente, por exemplo, uma requisição REST, você sempre vai ter a chance de receber um 404, um erro 500 ou qualquer coisa desse tipo. Logo, você vai ter que ter mecanismos para conseguir viver, mesmo fazendo chamadas que possam te atrapalhar. Uma das melhores formas para resolver esse tipo de problema é trabalhar de forma assíncrona. O que isso significa? Significa que, ao invés de um microsserviço chamar o outro diretamente, eles vão se falar através de mensagens, através de eventos. Dessa forma, o Microsserviço 1 fala: “Olha, compra realizada, os dados do cartão estão aí”, e o Microsserviço 2 pega os eventos de compra realizada e fala: “Compra aprovada, já fiz o pagamento do cartão”. Daí ele manda falando da compra aprovada, Aí o microsserviço 4 fala: “vou gerar nota fiscal da compra aprovada”, e ele retorna “nota fiscal emitida”. Então o microsserviço 3 fala: “Opa! Com a nota fiscal emitida eu vou permitir que o caminhão saia para fazer entrega.

 

Olha só que interessante. Um microsserviço não falou diretamente com o outro. E, o mais interessante de tudo isso é o seguinte: se um microsserviço cair, os outros microsserviços vão continuar funcionando normalmente. E quando ele subir, o que vai acontecer? Ele vai processar as mensagens pendentes que ele tinha. Então, isso aqui é um dos pontos mais importantes quando nós estamos falando sobre microsserviços. Pode acontecer de você trabalhar de forma um pouco mais mista. Como assim? Um microsserviço chama o outro, mas eu tenho microsserviços que também falam diretamente por eventos. Isso pode acontecer. Mas, novamente, a gente sabe que o Microsserviço 1 e 3, dependem um do outro, logo, pode dar ruim aqui nesse nosso caso. Legal? Agora que você entendeu um pouco a ideia dos microsserviços, eu acho que o mais importante de tudo isso é você entender as motivações desse cara e o porquê eu utilizaria uma arquitetura dessa forma, ao invés de utilizar um único sistema, um sistema monolítico para resolver todos os meus problemas dentro da minha organização. Essa é a grande pergunta. Muitas pessoas falam um monte de coisas, de vantagens que o Microsserviço tem e eu vou dar a minha opinião aqui. Provavelmente pode ter pessoas que discordam, concordam, etc, mas é a minha opinião aqui para você. A principal motivação para utilizar os microsserviços nos dias de hoje é organizacional e equipe.

 

O que isso significa? Imagine que a sua empresa tem 1.000 desenvolvedores. Por exemplo, a galera do Mercado livre tem 12.000 desenvolvedores. Vocês imaginam 12.000 pessoas trabalhando em um único sistema? Não, né? E é por isso que você consegue trabalhar em equipes. Quando você consegue trabalhar em equipes, você trabalha com microsserviços. Cada equipe tem seu microsserviço para cuidar, cada equipe tem o seu projeto, cada equipe consegue fazer deploys independentes e cada equipe não vai afetar o seu vizinho quando ele fizer o seu deploy. Então, diversos projetos dentro da mesma organização podem ser tocados e não afetar o que está acontecendo de forma geral em todas as áreas da organização. Assim, o primeiro fator que você vai pensar quando você vai querer entrar em uma situação trabalhando com microsserviços, é uma motivação organizacional. Eu acho que é a que mais pesa, é a maior vantagem que você vai ter. Por outro lado, existem algumas vantagens também que estão atreladas a essa vantagem organizacional. Por exemplo, eu consigo escalar. Como assim? Se eu, por exemplo, tiver um único sistema e uma área desse meu sistema tiver muito acesso, eu vou ter que escalar o meu sistema inteiro. Se eu tiver microsserviços, eu escalo somente o microsserviço que está tendo muito acesso. Se eu tenho um único sistema, por melhor que ele esteja arquitetado, vai ter tanta responsabilidade no mesmo sistema que uma coisa vai começar a afetar outra, invariavelmente. Então, quando você tem microsserviços, você consegue criar diversos microsserviços para diversas responsabilidades.

 

Outra coisa, eventualmente você vai querer utilizar tecnologias diferentes para soluções diferentes, por exemplo: você quer mais performance, vai usar Go, vai querer trabalhar com machine learning, etc, vai botar um Python e você consegue criar serviços diferentes. Então, isso também, se você olhar, é uma vantagem sim. E, você também tem a opção de trabalhar de forma com baixo acoplamento. Logo, você consegue sim, ter baixo acoplamento, desde que você consiga trabalhar de forma decente. Por outro lado, o que você tem que levar em conta aqui é o seguinte: microsserviços é uma parada complexa pra caramba. Não é algo simples e é isso que muita gente acaba não entendendo. Vou dar um exemplo: para trabalhar com microsserviços, a sua organização tem que ter um nível de maturidade. Por quê? Porque as gestões das equipes vão ser diferentes, a gestão dos projetos vão ser diferentes e a forma de você conseguir disponibilizar esses ambientes para os desenvolvedores vai ser diferente, ou seja, muda muita coisa. Outra coisa, os times têm que ser mais maduros, porque cada time tem que se especializar naquele domínio que aquele microsserviço vai resolver. Aquele time tem que conseguir entender outras formas de comunicação, porque eles não vão trabalhar mais só como o Rest, ficar chamando APIs, eles vão ter que trabalhar com mensageria, vão ter que trabalhar com eventos. Outra coisa que vai acontecer é que eles não vão ter todos os dados, porque o banco de dados é separado.

 

Então, muitas vezes é como eu gero um relatório de dados que não estão totalmente no meu microsserviço. Esses tipos de questões vão começar a acontecer. Existem diversas estratégias para isso, claro, eu não quero me prender nesse momento, mas esses tipos de coisa vão acontecer. Outra coisa, Deployment hoje em dia na sua empresa, eu espero que você tenha uma esteira de C.I. de C.D, ou seja, você sobe, faz cold review, gera integração contínua, depois disso faz o Deployment, tem as estratégias de Deployment e vai para o ar. Se você tem um sistema, você vai fazer uma esteira de C.I e C.D. Se você tem dez sistemas, são dez esteiras de C.I e C.D, são dez aplicações diferentes rodando. Eventualmente vão ser dez instâncias diferentes, dez pods diferentes. Eu não sei como você vai se organizar na infraestrutura, mas você tem que saber que você vai ter que ter uma cultura mais voltada para DevOps para a parte de SRP, porque se não, a coisa vai pegar. Legal? Outra coisa importante também é a parte de Observabilidade. Quando eu tenho um único sistema, quando dá um erro, eu olho Stack Trace, eu vi da onde que aconteceu. Quando eu tenho um monte de microsserviço chamando o outro, quando dá um problema, eu vou saber qual o microsserviço deu problema, em qual momento? Com qual usuário? Como que eu consigo rastrear? Um que chamou o outro, que chamou outro, que chamou outro e deu erro? Como eu sei qual que deu erro? Logo, eu tenho que ter a parte de observabilidade muito mais em dia.

 

E para eu mexer com Observabilidade, os desenvolvedores tem que saber, a gente tem que fazer instrumentação, temos que ter as ferramentas certas. Observabilidade é caro, e temos que pensar nesses aspectos aqui. Dessa forma, quando nós vamos trabalhar com microsserviços, tudo acaba sendo mais complexo. Troubleshooting, quando dá um problema, como que eu tenho certeza que esse problema foi gerado pelo meu microsserviço? E, se o meu está gerando esse problema, esse problema está sendo por que? Porque a mensagem do evento que o cara mandou para o sistema de mensageria tá errado o padrão? Será que mudaram alguma coisa? Então, assim as possibilidades aumentam muito e quanto mais possibilidades tem, mais sênior a sua equipe vai ter que ser para conseguir detectar esses tipos de problema. Portanto, microsserviços não é bala de prata, não vai resolver sua vida, mas, definitivamente você tem que saber como é que funciona. Você tem que ter uma experiência real com microsserviços. E, a nossa ideia aqui, inclusive, é conseguir gerar experiências desse tipo, para que você consiga se sentir mais preparado. Mas, de uma forma ou de outra, é importante você saber que não são todos os casos que você vai ter que trabalhar com microsserviços. Legal?  No próximo passo a gente vai falar sobre ser QRS. Vamos lá!