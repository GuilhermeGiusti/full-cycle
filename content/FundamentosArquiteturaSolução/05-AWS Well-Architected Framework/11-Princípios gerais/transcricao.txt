E agora a gente vai falar sobre os princípios gerais. Esses princípios gerais podem englobar todos os pilares que a gente acabou de falar. Então, vamos dar uma resumida porque tem coisas que acabam sendo, eu não digo repetitivas, mas fazem muita relação com o que a gente acabou de ver. 

 Primeira coisa, pare de adivinhar suas necessidades de capacidade. Ou seja, pare de chutar a computação. Esse é o principal ponto. Você vai fazer teste de carga, você vai ver o quanto você realmente está precisando utilizar. Tem muita gente pagando máquina mais caro, gastando mais, não gerando mais valor para o negócio, indo contra pontos de sustentabilidade, conforme a gente falou, simplesmente porque não conseguiu perceber que as máquinas que ele está usando são muito mais, assim, tem muito mais poder do que ele precisa ou vice-versa. Outro ponto importante, sistemas de teste em escala de produção. O que significa? Hoje eu consigo pegar todos os sistemas que eu tenho, que estão rodando em produção ou mesmo antes de colocar em produção, e consigo criar um ambiente paralelo, igualzinho, eu consigo fazer isso. E fazendo isso, eu consigo rodar testes, eu consigo experimentar, eu consigo fazer comparações, porque somente a partir disso, eu consigo, por exemplo, chegar mais próximo da melhor capacidade computacional que eu preciso ou os processos que eu preciso. Então, criar ambientes paralelos, testar cada vez mais, vai sempre permitir com que você consiga melhorar. 

Outro ponto, automatize a experimentação arquitetônica. O que isso quer dizer? Pessoal, o lance é o seguinte, hoje em dia, a gente tem que viver de experimentação para conseguirmos manter o sistema evolutivo. Mas para isso a gente tem que automatizar esse processo, porque se cada vez que você for fazer um teste, você tiver que fazer as coisas de forma totalmente manual, isso vai fazer com que você pare de experimentar, porque experimentar dá trabalho. Então, tenha em mente como eu posso trabalhar para automatizar tarefas, mesmo pontos experimentais, para que eu fique cada vez mais motivado a testar para melhorar a cada dia? Então se for muito difícil experimentar, eu não vou experimentar, é como refatorar código. Se eu tiver muito trabalho para refatorar algo que já está funcionando, eu não vou refatorar. Se eu não tiver testes para refatorar, eu não vou refatorar porque eu tenho medo daquilo quebrar. Então, quando eu automatizo as coisas, fica mais fácil e eu fico mais motivado. Eu fico com menos medo de experimentar.

E permita arquiteturas evolutivas, ou seja, eu experimentando e criando arquiteturas que podem crescer conforme o tempo, vai mudar completamente o jogo. Tem muitos devs que criam arquiteturas que acabam complicando muito para você evoluir, eu vou dar um exemplo simples. Lembra quando a gente estava falando em criar sistemas stateful? Ou seja, somente para você conseguir escalar horizontalmente algo que você não vai conseguir, você vai ter que evoluir empilhando recursos computacionais. E vai ficar cada dia mais difícil você conseguir, por exemplo, escalar, mudar de arquitetura, etc. Então, permita que o seu sistema possa continuar crescendo, porque sistemas continuam crescendo, sistemas não são entregues e acabou, a gente falou inclusive sobre total cost of ownership um tempo atrás. Guie a sua arquitetura usando dados. Tudo que você faz é computado, é registrado. Todos os logs que você tem são computados, ou seja, você sabe no final do dia, baseado nos dados que você tem, se você está gastando um recurso a mais, se você está gastando um recurso a menos. Você tem que conseguir monitorar, você tem que conseguir tirar proveito de tudo que você tem disponível para que você consiga otimizar. Eu vou dar um exemplo simples, se 50% do tempo que eu estou trabalhando, ou 80% do tempo que eu estou trabalhando, eu estou usando somente 40% de CPU nas minhas máquinas, eu vou usar isso, esses dados ao meu favor, para eu conseguir diminuir o poder computacional das minhas máquinas, para que eu consiga economizar e ser mais eficiente. E por outro lado, a gente tem o nosso famoso “melhorar durante os dias de jogo”. O que isso significa? Atualização contínua. A sua aplicação está rodando, sua arquitetura está rodando e baseado em dados, baseado no dia a dia com os desenvolvedores, baseado nas mudanças de regras de negócio na empresa, eu vou conseguir otimizar cada vez mais o meu jogo. Eu vou conseguir deixar as coisas mais automáticas, eu vou conseguir gastar menos computação, eu vou conseguir apresentar ferramentas que vão conseguir melhorar a minha performance, eu vou conseguir aumentar o meu throughput. Então, se você perceber, a cada dia que a sua aplicação no ar está rodando, todos os dias eu tenho a capacidade de melhorar um pouco mais. Ou seja, melhore a cada dia, “melhore nos seus dias de jogo”. Pessoal, no meu próximo vídeo eu vou dar uma rápida navegada para você no site do AWS Well Architecture, somente para te situar de onde veio todo esse conteúdo, esse material, esse bate-papo que a gente está tendo. E também para eu conseguir fazer essa recomendação de leitura. É uma leitura densa, é uma leitura que dá trabalho. Além disso, grande parte do material ainda está em inglês, então, se você tem dificuldade com inglês, bote no translator, mas não deixe de ler essa parada. Então, vamos nessa!