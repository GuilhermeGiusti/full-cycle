E agora, meu povo, nós vamos falar sobre API Gateway. Para que serve esse cara? Como que funciona e por que ele é tão importante hoje em dia? A gente vem de um mundo distribuído, ou seja, temos diversos microserviços, diversos sistemas e cada sistema tem uma função, ele cumpre um papel na sua organização. E o que acontece no final do dia é que quando você tem diversos serviços, esses serviços, muitas vezes têm que ser acessados de fora da sua aplicação, ou seja, ele vem ser acessado diretamente pelo cliente, né? E o que acontece nesse momento? O cliente tem que acessar uma rota, ou ele tem que acessar um subdomínio. Agora, imagina que o carrinho de compras está em um serviço que tem um IP, o checkout está em outro, o catálogo de produtos está em outro, a busca está em outro, e tudo isso são serviços diferentes. Já pensou você ficar gerando um subdomínio para cada pedaço ou um IP para cada pedaço para o usuário acessar? E, além disso, você acaba expondo claramente para o seu usuário quais são os seus Endpoint que você acaba tendo. Então, isso acaba sendo muito ruim. E, o API Gateway serve para te ajudar com esse tipo de roteamento e muito mais funcionalidades. Como é que funciona a ideia do API Gateway? Ele serve para centralizar as suas requisições. Dessa forma, qualquer requisição que vai bater na sua malha de serviços, primeiro vai bater no seu API Gateway e o API Gateway vai fazer o roteamento. Logo, você vai parametrizar e falar: “quando o cara acessar a barra, a Cart cai nesse serviço e quando acessar o checkout vai cair naquele serviço”.

 

Além disso, o API Gateway consegue trabalhar com autenticação, porque autenticação? Galera, vamos imaginar que você tem um monte de microsserviço para dentro da sua rede. Já pensou todos esses microsserviços terem que ficar implementando política de autenticação? Criar um usuário, verificasse se o usuário é válido e todos esses tipos de coisas, não faz sentido. Então, o que acontece? Quem toma conta dessa autenticação é o seu API Gateway. Assim, você tem certeza que todo mundo que acessar o seu microsserviço, se a requisição bateu lá, você parte do princípio que aquela requisição é segura. Porque? Porque você sabe que ele foi autenticado pelo API Gateway. Assim, você não tem que ficar implementando 10.000 vezes a mesma coisa, pois você já sabe, passou para a minha rede interna, eu sei que essa parada está segura, houve uma camada de autenticação. 

 

Obviamente, vai depender muito de como cada corporação gerencia sua segurança e tudo mais, mas, de forma geral, você consegue trabalhar dessa forma. Passou pelo API Gateway? Você sabe que ele já foi autenticado e se ele foi autenticado, você consegue fazer o processamento normal. Legal? Outra coisa mega interessante que o API Gateway faz é conversão de dados. Como assim? Imagine que você tem um serviço super antigão e esse microsserviço super antigão roda com soup, por exemplo, recebendo XML. Mas, você quer expor uma API Rest e não quer reescrever essa API Rest, o que você pode fazer? A pessoa vai e manda uma requisição para um endereço, passando os dados no formato em JSON, a sua API Gateway pega aquele JSON, converte para XML e rotear essa informação para o microsserviço correspondente. Ou também você pode fazer conversão de dados nos cabeçalhos HTTP. É muito comum, as vezes, quando o sistema manda uma requisição e o API Gateway pega essa requisição, vai em um cabeçalho, adiciona um cabeçalho, remove um cabeçalho, coloca ali, por exemplo, um Correlation ID para saber que aquela requisição tem um ID para poder rastrear essa requisição em todos os microsserviços. Isso é muito comum.

 

Então, a API Gateway faz o que ela quiser com a sua requisição, essa é a verdade. Porque ela consegue receber, converter, fazer o que quiser para depois reencaminhar. Dessa forma, ela consegue trabalhar com cabeçalhos e consegue trabalhar com throttling também. Assim, você consegue falar o seguinte: “Olha, estou recebendo muita requisição e não vou conseguir aguentar essa carga tão forte”. Então, eu começo a segurar um pouco essas requisições antes de enviar para os meus microsserviço, ou eu posso trabalhar com Rate Limit. Olha só que interessante! Você manda uma requisição e eu falo: “Para você, só vou retornar 100 requisições por segundo, depois disso eu não respondo mais”. Legal? “Agora, para você que está acessando isso com mais prioridade, eu vou deixar você acessar com 200 requisições por segundo”. Logo, o Rate Limit pode ser geral, ou seja, você fala: “essa requisição por IP, por exemplo, vai aguentar 1.000 requisições por segundo, depois disso eu seguro para não derrubar meus microsserviços” ou eu posso criar grupos e dar mais prioridade para alguns tipos de requisição de alguns tipos de cliente. Logo, o Rate Limit é muito comum.

 

Galera, na real é o seguinte: API Gateway tem muitas funcionalidades, existem muitos plugins que você consegue colocar na sua API Gateway, por exemplo: o cara acessou um endereço, você vai lá e chama uma função Lambda da WS. Isso é totalmente possível também. Por quê? Porque a API Gateway vai lá, acessa e tudo mais, entende? Portanto, API Gateway é um recurso extremamente utilizado, principalmente quando você está trabalhando em um mundo mais distribuído. Essa é uma ideia de como funciona uma API Gateway. Você tem os seus microsserviços e você tem a API Gateway. Então, todo mundo primeiro vai bater na sua API Gateway e a sua API Gateway vai redirecionar para o serviço que faz sentido de acordo com todos os parâmetros que você acabou colocando. Existem diversas soluções como API Gateway, por exemplo: a própria WS tem a sua própria API Gateway, que você vai lá e faz toda a configuração. Existem sistemas que trabalham especificamente com API Gateway, que são soluções proprietárias que você pode comprar. Se eu não me engano, a Sem Cydia tem isso, a Mulesoft também tem isso. E, uma API Gateway que é muito famosa Open Source é chamada de Kong. O Kong faz também muito bem esse tipo de serviço e funciona muito bem. Beleza? Essa é a ideia geral sobre a API Gateway. É isso aí galera!

 