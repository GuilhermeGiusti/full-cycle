Bom pessoal, já que a gente falou sobre Sidecars, vamos falar agora sobre Service Mesh. O que é uma Service Mesh? Eu peguei a definição aqui do site do Istio, que é um serviço de Service Mesh, olha só. “Uma malha de serviço a uma camada de infraestrutura dedicada que você pode adicionar às suas aplicações. Ele permite adicionar recursos de forma transparente, como observabilidade, gerenciamento de tráfego e segurança, sem adicioná-los ao seu próprio código”. Agora, eu não sei se você se tocou, mas eu não preciso adicionar no meu código, a minha aplicação tem essas informações de forma transparente e, mesmo assim, eu tenho esses recursos. Como será que um Service Mesh funciona? Você lembra que nós falamos sobre Sidecars no nosso último vídeo? O Service Mesh utiliza a ideia de Sidecars exatamente para cumprir esse tipo de ação. Olha só que interessante, aqui é o Service Mesh Istio, é como o Istio funciona. A gente tem vários sistemas que dá para trabalhar com Service Mesh, por exemplo, o Consul. O Consul é da HashiCorp. Então, o que acontece aqui? Olha a ideia dele. Você consegue fazer gerenciamento de tráfego, ou seja, eu consigo bloquear que o serviço A acesse o B, ou posso falar que o A pode acessar o B. Eu posso bloquear que o A faça a chamada para internet, política de egresso, por exemplo. Logo, eu consigo fazer isso, ou eu posso fazer o seguinte: toda vez que o A chamar o B e o B não responder, eu faço mais duas retries, mais duas retentativas. Como que isso é feito? Através de Service Mesh. O meu sistema como um padrão não faz retentativa, mas quem faz retentativa é a minha Mesh.

 

Segurança: eu até falei para você sobre a parte de autenticação de requisições utilizando o mTLS. Quem faz isso de forma transparente é o Service Mesh utilizando o Sidecars. Você tem policy Enforcement. Eu falei um pouco disso para vocês. Políticas de quem pode acessar cada um, regras que eu quero colocar ali. Outro ponto importante é a observabilidade. Eu quero conseguir olhar todos os meus microsserviço se comunicando, o A que chama o B, que chama o C, que chama o D, o problema deu aqui o D está degradado, vai gerar problema no C. Portanto, eu consigo observar todos os meus serviços se comunicando ali naquele momento. Eu consigo, por exemplo, adicionar também o Circuit Breaker. Nós conseguimos estender recursos e adicionar o que a gente quiser. Por quê? Porque o Istio possibilita, ele consegue trazer diversos tipos de serviço, de recurso. Eu vou dar um exemplo: em relação ao gerenciamento de tráfego, você consegue até customizar a regra do seu load balance. Eu não quero que o meu load balance seja round robin, porque a máquina A tem configurações diferentes da máquina B. Logo, eu quero priorizar que as requisições caiam mais na B do que na A, eu quero um 60, 40, por exemplo. Então, isso também é possível utilizando o Service Mesh. Aqui eu peguei a imagem do próprio site do Istio para você entender a ideia principal. O Istio, ao invés de instalar diversas aplicações, como Sidecar, ele instala apenas uma, que é chamada de envoy.

 

O envoy é um proxy, é uma aplicação que não foi feita pela galera do Isto, é um proxy que você pode instalar em qualquer lugar. Tem site, depois se você buscar, entra no site do envoy. Inclusive, ele é mega complexo. Mas, o que acontece, para cada aplicação, o serviço A e o serviço B, você coloca o envoy, o proxy, e o serviço A só fala com o serviço B através dos proxys, entende? Assim, quando o A quer mandar uma requisição para o B, o A manda uma requisição para o envoy, o envoy vai manda uma requisição para o envoy do service B e o enoy do service B manda a requisição para o service B. Agora, como essas requisições são capturadas pelo envoy, eu tenho duas situações aqui. Eu posso pegar todos esses dados que estão sendo trafegados pela minha rede e jogar para um cara que, no caso do Istio, que é chamado de control plane, ou seja, quando você pega essas informações, o Istio consegue pegar, por exemplo, métricas. E quando o Istio quer fazer alguma configuração no envoy, o que ele faz? Ele publica essas alterações e todos os proxys que estão rodando em todas as aplicações conseguem ser alterados com as configurações que ele acabou de colocar. Assim, o control plane pega as métricas e todos os dados da rede que estão sendo trafegados para ele conseguir utilizar essas métricas. Mas, ele também consegue jogar dados em todos os sistemas, porque o envoy estar colado em todas as aplicações. Legal? Bom, essa é uma ideia básica de Service Mesh. Maravilha! Então falamos sobre Sidecars e também Service Mesh.

